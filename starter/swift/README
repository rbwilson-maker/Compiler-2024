(* README
 * Author: Frank Pfenning <fp@cs.cmu.edu>
 * Modified: Anand Subramanian <asubrama@andrew.cmu.edu>
 * Modified for OCaml from SML: Michael Duggan <md5i@cs.cmu.edu>
 * Modified for Swift from Ocaml: Jonathan Burns <jaburns@andrew.cmu.edu>
 *)

-----------------------------------------------------------------------
Welcome to 15-411!
-----------------------------------------------------------------------

This is some starter code for the L1 compiler you have to build for
the Lab1.  It contains a lexer, parser, translator, and even a code
generator, except that the code generator creates pseudo assembly
language with fictitious instructions and an unlimited number of
registers.  We took some care to use good style (according to the
instructor); you may consider this a model for your own coding.  Feel
free to modify any and all of this code as you see fit.

Bug reports to the course staff are particularly welcome and will be
noted in the extra credit category.

-----------------------------------------------------------------------
Swift Notes
-----------------------------------------------------------------------

This starter code assumes Swift 3.x and has been tested on macOS 10.11.6
and Ubuntu 16.04.1 LTS. An Objective-C runtime is not required.

The program can be compiled and debugged using Xcode's build system on
Mac, or using the provided Makefile on either Mac or Linux.
On Mac, Xcode 8 (or higher) is required, and on Linux, a standalone
build of Swift is required. Xcode is available for download from the Mac
App Store (https://itunes.apple.com/us/app/xcode/id497799835). Swift
builds are available from swift.org.

Note that you must make sure that the Makefile compiles exactly the same files
as the Xcode project by including the appropriate subdirectories in the SUBDIRS
variable of the makefile and adding the same files to the Xcode project. The
grading harness uses the Makefile for compilation, so if you're encountering
compilation errors when using the grading harness that don't appear in Xcode,
you're probably not compiling the same set of files in both places.

------------------------------------------------------------------------
Source Files
------------------------------------------------------------------------

The following are the source files for the L1 compiler

README               -- this file

Makefile             -- makefile for the compiler

    % make              (generates file bin/c0c)
    % ../bin/c0c ../tests/return01.l1
            (should generate ../tests/return01.l1.abs in pseudo assembly)

    % make clean        (removes generated files)

bin/c0c              -- the native executable generated by Xcode

main.swift          This is the main driver.  It calls all the other parts
                    of the compiler.

Parse/              lexing and parsing
  AST.swift         abstract syntax tree for the l1 language
  c0Lexer.l         lexer for l1 (C flex file)
  c0Parser.y        parser for l1 (C bison file)
  C0TokenType.h     declares the token types available to the bison parser
  Parser.swift      code that sets up and calls the parser/lexer

Type/               type checking
  TypeChecker.swift basic type checker over the ast

Trans/              translation to IR
  IRTree.swift      data structure representing the IR tree
  Trans.swift       converts from the AST to the IR tree
  Temp.swift        generates temporary variables on the fly

Codegen/            conversion to assembly
  Assem.swift       representation of assembly used by the compiler
  CodeGen.swift     generates pseudo-assembly with temporaries from IR

Util/
  C0ParseNode.h     the result of lexing and parsing is a tree of C0ParseNode
  C0ParseNode.c     objects, which are converted to Swift enums in
                    Parser.swift.
  Yacc.h            supporting declarations for lexer/parser
  Yacc.c            supporting definitions for lexer/parser
  ReadFile.swift    utility functions for platform-independent file reading
  String+Subscript.swift   utility functions for indexing strings

c0c-Bridging-Header.h     listing of C declarations available in Swift

------------------------------------------------------------------------
Debugging Hints
------------------------------------------------------------------------

When debugging your code, it will be necessary to provide command-line
arguments to c0c. You can do this by following these steps:

1. In the toolbar, click "c0c" (next to the run/stop buttons)
2. Click "Edit Scheme..."
3. Ensure that "Run" is selected in the left menu, and "Arguments" is
   selected in the tab bar near the top.
4. Place each argument to c0c on its own line under "Arguments Passed
   On Launch"
5. Click "Close" and build/run the program.
