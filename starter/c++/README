-----------------------------------------------------------------------
Welcome to 15-411!
-----------------------------------------------------------------------

This is some starter code for the L1 compiler you have to build for
the Lab1.  It contains a lexer, parser, translator, and even a code
generator, except that the code generator creates pseudo assembly
language with fictitious instructions and an unlimited number of
registers.  Feel free to modify any and all of this code as you see
fit.

Bug reports to the course staff are particularly welcome and will be
noted in the extra credit category.

------------------------------------------------------------------------
Source Files
------------------------------------------------------------------------
The following are the source files for the L1 compiler

README               -- this file

Makefile             -- makefile for the compiler
                        For a quick test

    % make              (generates file bin/c0c.heap.<os-tag>)
    % bin/c0c --verbose ../tests0/return01.l1
	                (generate ../tests/return01.s in pseudo assembly and shows the passes being run)

    % make clean        (removes generated files)


gen_tokentypes.py    -- Use to generate tokentypes.h from the output of bison
tokens.py*           -- Used to generate token2name function from the output of bison for pretty printing and debugging

c0c.cc		     -- main invocation of compiler, has command line arguments defined

options.h	     -- defines global variables set by command line parsing

c0.l		     -- l1 lexer
c0.y		     -- l1 grammer and parser

srcfile.cc	     -- main driver of the compiler. Define your passes here and they will be called.
srcfile.h


arg.cc		     -- utility class to do CLI argument parsing
arg.h
stacktrace.h	     -- utility file to dump a stack trace.  
util.cc		     -- utilities for printing error messages and such
util.h

asm.cc		     -- general definition of abstract (and concrete assembly)
asm.h

bb.cc		     -- basicblock routines
bb.h

cfg.h		     -- a place holder for what will become a control flow graph data structure

cst.cc		     -- concrete/abstract syntax tree definition
cst.h

ir.cc		     -- translates CST to triple code
munch.cc
munch.h

output.cc	     -- used to output assembly files
output.h

symbols.cc	     -- for interning symbols, so you can compare pointers instead of doing string comparison
symbols.h

symtab.cc	     -- symbol table management
symtab.h

type.cc		     -- skeleton for defining types
type.h

typecheck.cc	     -- very simple "type" checker
