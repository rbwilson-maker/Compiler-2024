//test return 1

bool isGoofyPrime(int number);

int main() {
    if (isGoofyPrime(23)) {
        return 1;
    }
    return 0;
}

bool isPrime(int n);

int pow(int a, int b) {
    if (b == 0) return 1;
    return a * pow(a, b-1);
}

int digitCount(int n) {
    int digitCount = 0;
    while (n > 0) {
        digitCount++;
        n /= 10;
    }
    return digitCount;
}

bool isGoofyPrime(int n) {
    assert(n > 0);
    if (!isPrime(n)) {
        return false;
    }
    bool hasEvens = false;
    int noEvens = 0;
    int digit;
    while(n > 0) {
        digit = n % 10;
        if (digit % 2 == 0) {
            hasEvens = true;
        }
        else {
            noEvens = noEvens + digit * pow(10, digitCount(noEvens));
        }
        n /= 10;
    }
    return (isPrime(noEvens));
}

bool isPrime(int n) {
    if (n < 2) return false;
    else {
        if (n == 2) return true;
        else {
            if (n % 2 == 0) return true;
            else {
                for(int i = 3; i < n; i++) {
                    if (n % i == 0) return false;
                }
            }
        }
    }
    return true;
}