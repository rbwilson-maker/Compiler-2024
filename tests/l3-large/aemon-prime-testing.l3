//test return 0

int min(int a, int b)
{
	if (a > b)
		return b;
	return a;
}

/* Copied from Wikipedia */
int modular_pow(int base, int exponent, int modulus)
{
	if (modulus == 1)
		return 0;
	int result = 1;
	base = base % modulus;
	while (exponent > 0) {
		if (exponent % 2 == 1)
			result = (result * base) % modulus;
		exponent = exponent >> 1;
		base = (base * base) % modulus;
	}
	return result;
}

/*
 * Implements Miller-Rabin primality testing. Really this function should pick
 * its witnesses randomly, but I don't think such a thing is possible in L3,
 * so it picks 2..30 as the witnesses in every case. This makes it not
 * actually work for primality testing... but the point isn't to figure out if
 * a number is prime, it's to test your compiler.
 */
bool is_prime(int n)
{
	int a;
	int r = 0;
	int d = n - 1;
	while (d % 2 == 0) {
		r += 1;
		d /= 2;
	}
	/* We'll pick some stupid witnesses */
	for (a = 2; a < min(30, n - 2); a++) {
		int x = modular_pow(a, d, n);
		if (!(x == 1 || x == n - 1)) {
			/* Guilty until proven innocent */
			bool composite = true;
			for (int i = 0; i < r - 1; i++) {
				x = modular_pow(x, 2, n);
				if (x == 1)
					return false;
				if (x == n - 1) {
					composite = false;
					i = r - 1;
				}
			}
			if (composite)
				return false;
		}
	}
	return true;
}

int main()
{
	assert(is_prime(7));
	assert(is_prime(23));
	assert(is_prime(1009));
	assert(is_prime(5003));
	assert(!is_prime(6));
	assert(!is_prime(25870513));
	return 0;
}
