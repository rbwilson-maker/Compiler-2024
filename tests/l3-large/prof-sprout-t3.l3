//test return 1
//test function calls

int push(int stack, int n) {
  return (stack << 1) | n;
}

int peek(int stack) {
  return stack & 1;
}

int pop(int stack) {
  return 0x7fffffff & (stack >> 1);
}

// checks if n[:len] has an equal # of 0's and 1's using a (very limited) PDA
bool check(int n, int len) {
  int size = 0;
  int stack = 0;
  for (int i = 0; i < len; i++) {
    int cur = n & 1;
    n = 0x7fffffff & (n >> 1);
    if (size == 0 || peek(stack) == cur) {
      stack = push(stack, cur);
      size++;
    } else {
      stack = pop(stack);
      size--;
    }
  }
  return size == 0;
}

int main() {
  return check(0x3b9768c4, 32) ? 1 : 0;
}
