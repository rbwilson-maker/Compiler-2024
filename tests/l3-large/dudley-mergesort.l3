//test return 3241350

// Encodes a list into a product of prime powers. Mergesort

bool isPrime(int n) {
  for (int i = 2 ; i < n ; i += 1) {
    if (n % i == 0) { return false; }
  }
  return true;
}

int hd(int n) {
  assert(n > 1);
  int i = 0;
  for (i = 0 ; n % 2 == 0 ; n /= 2) {
    i += 1;
  }
  return i;
}

int tl(int n) {
  assert(n > 1);
  int i = 2;
  int result = 1;

  for (; n % 2 == 0 ; n /= 2) { }

  for (int p = 3 ; n > 1 ; p += 1) {
    if (isPrime(p)) {
      while (n % p == 0) {
        n /= p;
        result *= i;
      }
      i = p;
    }
  }
  return result;
}

int cons(int x, int n) {
  int i = 2;
  int result = 1;

  for (int j = 0 ; j < x ; j += 1) {
    result *= 2;
  }

  for (int p = 3 ; n > 1 ; p += 1) {
    if (isPrime(p)) {
      while (n % i == 0) {
        n /= i;
        result *= p;
      }
      i = p;
    }
  }
  return result;
}

int append(int n, int m) {
  if (n == 1) { return m; }
  int h = hd(n);
  int t = tl(n);

  return cons(h, append(t, m));
}

int length(int n) {
  int result = 0;
  for (int p = 2 ; n > 1 ; p += 1) {
    if (isPrime(p)) {
      while (n % p == 0) {
        n /= p;
      }
      result += 1;
    }
  }
  return result;
}

int drop(int x, int n) {
  assert(x <= length(n));

  int result = n;

  for (int i = 0 ; i < x ; i += 1) {
    result = tl(result);
  }

  return result;
}

int take(int x, int n) {
  if (x == 0) { return 1; }
  assert(x <= length(n));

  return cons(hd(n), take(x-1, tl(n)));
}

int merge(int n, int m) {
  if (n == 1) { return m; }
  if (m == 1) { return n; }

  int x = hd(n);
  int tn = tl(n);
  int y = hd(m);
  int tm = tl(m);

  if (x > y) {
    return cons(y, cons(x, (merge (tn, tm))));
  }
  else {
    return cons(x, cons(y, (merge (tn, tm))));
  }
}

int sort(int n) {
  int len = length(n);

  if (len == 0 || len == 1) { return n; }

  int left = take(len / 2, n);
  int right = drop(len / 2, n);

  return merge(sort(left), sort(right));
}

int main() {
  // n = [3,4,2,1]
  int n = (2*2*2) * (3*3*3*3) * (5*5) * 7;

  return sort(n);
}

