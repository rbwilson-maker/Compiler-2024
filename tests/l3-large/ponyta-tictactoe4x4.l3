//test return 1

// tic-tac-toe state fits in an int!
/*
 * 31...16 | 15...0
 * oes     | xes
*/

int get_oes(int state) {
	return (state >> 16) & 0xffff;
}

int get_xes(int state) {
	return state & 0xffff;
}

bool is_occupied(int state, int pos) {
	return ((get_xes(state) | get_oes(state)) & (1 << pos)) != 0;
}

bool is_won(int side) {
	for (int i = 0; i < 4; i++) {
		if ((side & (7 << 4*i)) == (7 << 4*i)
			|| (side & (14 << 4*i)) == (14 << 4*i)
			|| (side & 0x111 << i) == (0x111 << i)
			|| (side & 0x1110 << i) == (0x1110 << i)) {
			return true;
		}
	}
	return false;
}

int winner (int state) {
	int xes = get_xes(state);
	int oes = get_oes(state);

	if (is_won(xes)) {
		return 1;
	} else if (is_won(oes)) {
		return 2;
	} else if ((oes | xes) == 0xffff) {
		return 3;
	} else {
		return 0;
	}
}

int mini_max(int state, int alpha, int beta, bool side_) {
	int winner_ = winner(state);
	if (winner_ == 3) {
		return 0;
	} else if (winner_ == 2) {
		return -1;
	} else if (winner_ == 1) {
		return 1;
	}
	int side = side_ ? 1 : -1;
	int best_score = 2 * -side;
	for (int i = 0; i < 16; i++) {
		if (!is_occupied(state, i)) {
			int score = mini_max(state | 1 << ((side_ ? 0 : 16) + i), alpha,
				beta, !side_);
			if (score * side > best_score * side) {
				best_score = score;
				if (side_) {
					if (best_score > alpha) {
						alpha = best_score;
					}
				} else {
					if (best_score < beta) {
						beta = best_score;
					}
				}
				if (alpha >= beta) {
					return best_score;
				}
			}
		}
	}
	return best_score;
}

int best_move(int state, bool side_) {
	int best = -1;
	int side = side_ ? 1 : -1;
	int best_score = 2 * -side;
	for (int i = 0; i < 16; i++) {
		if (!is_occupied(state, i)) {
			int score = mini_max(state | 1 << ((side_ ? 0 : 16) + i),
				2, -2, !side_);
			if (score * side > best_score * side) {
				best = i;
				best_score = score;
			}
		}
	}
	return best;
}

int main() {
	bool side = true;
	int state = 0;
	while (winner(state) == 0) {
		int move = best_move(state, side);
		if (side) {
			state |= 1 << move;
		} else {
			state |= 1 << (move + 16);
		}
		side = !side;
	}
	return winner(state);
}

