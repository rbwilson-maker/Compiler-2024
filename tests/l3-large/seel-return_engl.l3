//test return 0
// Finds the number of letters (not including spaces) in the English
// representation of a number. Does not include the controversial word "and".

int nl_helper(int n) {

  // "negative" has 8 letters
  if (n < 0) {
    return 8 + nl_helper(-n);
  }

  // For billion/million/thousand/hundred, if it is a non-zero value, add
  // 7/7/8/7 respectively, and recurse on the remainder.
  else if (n >= 1000000000) {
    int div = n/1000000000;
    return nl_helper(n%1000000000) + (div == 0? 0 : 7 + nl_helper(div));
  } else if (n >= 1000000) {
    int div = n/1000000;
    return nl_helper(n%1000000) + (div == 0? 0 : 7 + nl_helper(div));
  } else if (n >= 1000) {
    int div = n/1000;
    return nl_helper(n%1000) + (div == 0? 0 : 8 + nl_helper(div));
  } else if (n >= 100) {
    int div = n/100;
    return nl_helper(n%100) + (div == 0? 0 : 7 + nl_helper(div));
  }

  // For tens, each has their letter count plus the final digit
  else if (n >= 90) {
    return 6 + nl_helper(n-90);
  } else if (n >= 80) {
    return 6 + nl_helper(n-80);
  } else if (n >= 70) {
    return 7 + nl_helper(n-70);
  } else if (n >= 60) {
    return 5 + nl_helper(n-60);
  } else if (n >= 50) {
    return 5 + nl_helper(n-50);
  } else if (n >= 40) {
    return 5 + nl_helper(n-40);
  } else if (n >= 30) {
    return 5 + nl_helper(n-30);
  } else if (n >= 20) {
    return 6 + nl_helper(n-20);
  }

  // For teens and digits, just simple letter count
  else if (n == 19) {
    return 8;
  } else if (n == 18) {
    return 8;
  } else if (n == 17) {
    return 9;
  } else if (n == 16) {
    return 7;
  } else if (n == 15) {
    return 7;
  } else if (n == 14) {
    return 8;
  } else if (n == 13) {
    return 8;
  } else if (n == 12) {
    return 6;
  } else if (n == 11) {
    return 6;
  } else if (n == 10) {
    return 3;
  } else if (n == 9) {
    return 4;
  } else if (n == 8) {
    return 5;
  } else if (n == 7) {
    return 5;
  } else if (n == 6) {
    return 3;
  } else if (n == 5) {
    return 4;
  } else if (n == 4) {
    return 4;
  } else if (n == 3) {
    return 5;
  } else if (n == 2) {
    return 3;
  } else if (n == 1) {
    return 3;
  }

  // "zero" is not said as part of larger numbers
  else if (n == 0) {
    return 0;
  }

  else {
    assert(false);
    return 0;
  }
}

int num_letters(int n) {

  // special case for MIN_INT since it would lead to infinite recursion
  if (n == -2147483648) {
    // "two billion" has 10 letters
    return 10 + num_letters(147483648);
  }

  // special case for "zero", which is only said if it is the only digit
  if (n == 0) {
    return 4;
  }

  // otherwise, normal recursion
  return nl_helper(n);
}

int main() {

  assert(num_letters(242139) == 3 + 7 + 5 + 3 + 8 + 3 + 7 + 5 + 4);
  assert(num_letters(1000011) == 3 + 7 + 6);
  assert(num_letters(12000000) == 6 + 7);
  assert(num_letters(-2000400106) == 8 + 3 + 7 + 4 + 7 + 8 + 3 + 7 + 3);

  return 0;
}
