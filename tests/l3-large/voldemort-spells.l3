//test typecheck

/*
QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ
QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ
QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ
QQQQQQQQQQQQQQQQQQQWQQQQQWWWBBBHHHHHHHHHBWWWQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ
QQQQQQQQQQQQQQQD!`__ssaaaaaaaaaass_ass_s____.  -~""??9VWQQQQQQQQQQQQQQQQQQQ
QQQQQQQQQQQQQP'_wmQQQWWBWV?GwwwmmWQmwwwwwgmZUVVHAqwaaaac,"?9$QQQQQQQQQQQQQQ
QQQQQQQQQQQW! aQWQQQQW?qw#TTSgwawwggywawwpY?T?TYTYTXmwwgZ$ma/-?4QQQQQQQQQQQ
QQQQQQQQQQW' jQQQQWTqwDYauT9mmwwawww?WWWWQQQQQ@TT?TVTT9HQQQQQQw,-4QQQQQQQQQ
QQQQQQQQQQ[ jQQQQQyWVw2$wWWQQQWWQWWWW7WQQQQQQQQPWWQQQWQQw7WQQQWWc)WWQQQQQQQ
QQQQQQQQQf jQQQQQWWmWmmQWU???????9WWQmWQQQQQQQWjWQQQQQQQWQmQQQQWL 4QQQQQQQQ
QQQQQQQP'.yQQQQQQQQQQQP"       <wa,.!4WQQQQQQQWdWP??!"??4WWQQQWQQc ?QWQQQQQ
QQQQQP'_a.<aamQQQW!<yF "!` ..  "??$Qa "WQQQWTVP'    "??' =QQmWWV?46/ ?QQQQQ
QQQP'sdyWQP?!`.-"?46mQQQQQQT!mQQgaa. <wWQQWQaa _aawmWWQQQQQQQQQWP4a7g -WWQQ
QQ[ j@mQP'adQQP4ga, -????" <jQQQQQWQQQQQQQQQWW;)WQWWWW9QQP?"`  -?QzQ7L ]QQQ
QW jQkQ@ jWQQD'-?$QQQQQQQQQQQQQQQQQWWQWQQQWQQQc "4QQQQa   .QP4QQQQfWkl jQQQ
QE ]QkQk $D?`  waa "?9WWQQQP??T?47`_aamQQQQQQWWQw,-?QWWQQQQQ`"QQQD\Qf(.QWQQ
QQ,-Qm4Q/-QmQ6 "WWQma/  "??QQQQQQL 4W"- -?$QQQQWP`s,awT$QQQ@  "QW@?$:.yQQQQ
QQm/-4wTQgQWQQ,  ?4WWk 4waac -???$waQQQQQQQQF??'<mWWWWWQW?^  ` ]6QQ' yQQQQQ
QQQQw,-?QmWQQQQw  a,    ?QWWQQQw _.  "????9VWaamQWV???"  a j/  ]QQf jQQQQQQ
QQQQQQw,"4QQQQQQm,-$Qa     ???4F jQQQQQwc <aaas _aaaaa 4QW ]E  )WQ`=QQQQQQQ
QQQQQQWQ/ $QQQQQQQa ?H ]Wwa,     ???9WWWh dQWWW,=QWWU?  ?!     )WQ ]QQQQQQQ
QQQQQQQQQc-QWQQQQQW6,  QWQWQQQk <c                             jWQ ]QQQQQQQ
QQQQQQQQQQ,"$WQQWQQQQg,."?QQQQ'.mQQQmaa,.,                . .; QWQ.]QQQQQQQ
QQQQQQQQQWQa ?$WQQWQQQQQa,."?( mQQQQQQW[:QQQQm[ ammF jy! j( } jQQQ(:QQQQQQQ
QQQQQQQQQQWWma "9gw?9gdB?QQwa, -??T$WQQ;:QQQWQ ]WWD _Qf +?! _jQQQWf QQQQQQQ
QQQQQQQQQQQQQQQws "Tqau?9maZ?WQmaas,,    --~-- ---  . _ssawmQQQQQQk 3QQQQWQ
QQQQQQQQQQQQQQQQWQga,-?9mwad?1wdT9WQQQQQWVVTTYY?YTVWQQQQWWD5mQQPQQQ ]QQQQQQ
QQQQQQQWQQQQQQQQQQQWQQwa,-??$QwadV}<wBHHVHWWBHHUWWBVTTTV5awBQQD6QQQ ]QQQQQQ
QQQQQQQQQQQQQQQQQQQQQQWWQQga,-"9$WQQmmwwmBUUHTTVWBWQQQQWVT?96aQWQQQ ]QQQQQQ
QQQQQQQQQQWQQQQWQQQQQQQQQQQWQQma,-?9$QQWWQQQQQQQWmQmmmmmQWQQQQWQQW(.yQQQQQW
QQQQQQQQQQQQQWQQQQQQWQQQQQQQQQQQQQga%,.  -??9$QQQQQQQQQQQWQQWQQV? sWQQQQQQQ
QQQQQQQQQWQQQQQQQQQQQQQQWQQQQQQQQQQQWQQQQmywaa,;~^"!???????!^`_saQWWQQQQQQQ
QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQWWWWQQQQQmwywwwwwwmQQWQQQQQQQQQQQ
QQQQQQQWQQQWQQQQQQWQQQWQQQQQWQQQQQQQQQQQQQQQQWQQQQQWQQQWWWQQQQQQQQQQQQQQQWQ
*/

// How well-locked-down is your operating environment?
// How much can you accomplish with only the lower 32 bits of the address space?
// How do we break memory safety with C0?

// Convert an integer to its hex char representation.
int to_hex_char(int i) {
  if (i >= 10) {
    return i - 10 + 65;
  }
  return 48 + i;
}

void print_dword(int i) {
  for (int j = 3; j >= 0; j--) {
    int k = (i >> (8 * j)) & 0xFF;
    if (k > 0) {
      putchar(k);
    }
  }
}

void print_hex(int i) {
  for (int j = 28; j >= 0; j-=4) {
    putchar(to_hex_char((i >> j) & 0xF));
  }
}

void print_int(int i) {
  if (i > 9) {
    int j = i / 10;
    i -= 10 * j;
    print_int(j);
  }
  putchar(48 + i);
}

int main() {
  int CHILDREN = 50;
  for (int child = 0; child < CHILDREN; child++) {
    int pid = fork();
    if (pid == 0) {
      // This is the child.
      for (int i = 0; i < 3; i++) {
        sleep(1);
        print_dword(0x48656c6c);
        print_dword(0x6f210a00);
      }

      // Print a message before we attempt mmap.
      print_dword(0x41747465);
      print_dword(0x6d707469);
      print_dword(0x6e67206d);
      print_dword(0x6d61702e);
      print_dword(0x2e2e0a00);

      // #include <sys/mman.h>
      int PROT_READ = 0x1;
      int PROT_WRITE = 0x2;
      int PROT_EXEC = 0x4;
      int MAP_FIXED = 0x10;
      int MAP_ANONYMOUS = 0x20;
      int MAP_PRIVATE = 0x02;

      // Who needs %rsp when %esp is enough?
      int buf = mmap(
        0x10000000,
        4096,
        PROT_READ | PROT_WRITE,
        MAP_ANONYMOUS | MAP_FIXED | MAP_PRIVATE,
        -1,
        0
      );

      if (buf <= 0) {
        // Rats, unsupported.
        print_dword(0x436f756c);
        print_dword(0x64206e6f);
        print_dword(0x7420616c);
        print_dword(0x6c6f6361);
        print_dword(0x7465206d);
        print_dword(0x656d6f72);
        print_dword(0x792e0a00);
        return 1;
      }

      // Print the address of buf.
      print_dword(0x53756363);
      print_dword(0x65737321);
      print_dword(0x20476f74);
      print_dword(0x20616464);
      print_dword(0x72657373);
      print_dword(0x20307800);
      print_hex(buf);
      putchar(10); // '\n'

      // Print a message before we attempt memset.
      print_dword(0x41747465);
      print_dword(0x6d707469);
      print_dword(0x6e67206d);
      print_dword(0x656d7365);
      print_dword(0x742e2e2e);
      print_dword(0x0a000000);

      // Write the binary path into the buffer.
      memset(buf, 47, 1);      // '/'
      memset(buf + 1, 98, 1);  // 'b'
      memset(buf + 2, 105, 1); // 'i'
      memset(buf + 3, 110, 1); // 'n'
      memset(buf + 4, 47, 1);  // '/'
      memset(buf + 5, 99, 1);  // 'c'
      memset(buf + 6, 97, 1);  // 'a'
      memset(buf + 7, 116, 1); // 't'
      memset(buf + 8, 0, 1);   // '\0'

      // Write the argument into the buffer.
      memset(buf + 9, 47, 1);   // '/'
      memset(buf + 10, 101, 1); // 'e'
      memset(buf + 11, 116, 1); // 't'
      memset(buf + 12, 99, 1);  // 'c'
      memset(buf + 13, 47, 1);  // '/'
      memset(buf + 14, 112, 1); // 'p'
      memset(buf + 15, 97, 1);  // 'a'
      memset(buf + 16, 115, 1); // 's'
      memset(buf + 17, 115, 1); // 's'
      memset(buf + 18, 119, 1); // 'w'
      memset(buf + 19, 100, 1); // 'd'
      memset(buf + 20, 0, 1);   // '\0'

      // Write a goodbye message.
      print_dword(0x41747465);
      print_dword(0x6d707469);
      print_dword(0x6e672065);
      print_dword(0x7865636c);
      print_dword(0x2e2e2e0a);

      // Boom.
      execl(buf, buf, buf + 9, 0);
    } else {
      // This is the parent.
      print_dword(0x4368696c);
      print_dword(0x64207069);
      print_dword(0x64206973);
      print_dword(0x20000000);
      print_int(pid);
      putchar(10);
    }
  }

  for (int child = 0; child < CHILDREN; child++) {
    wait(0);
  }

  return 0;
}
