//test return 41
// This test has a hard-coded tree represented as functions, and it computes a
// maximum of the leaf nodes' values by applying fold_fn()

int fold_fn(int L, int R) {
  return L > R? L : R;
}

int leaf1() {
  return 4;
}

int leaf2() {
  return 6;
}

int leaf3() {
  return 6;
}

int leaf4() {
  return 3;
}

int leaf5() {
  return 15;
}

int leaf6() {
  return 12;
}

int leaf7() {
  return 41;
}

int leaf8() {
  return 13;
}

int node1() {
  return fold_fn(leaf1(), leaf2());
}

int node2() {
  return fold_fn(leaf3(), leaf4());
}

int node3() {
  return fold_fn(leaf5(), leaf6());
}

int node4() {
  return fold_fn(leaf7(), leaf8());
}

int node5() {
  return fold_fn(node1(), node2());
}

int node6() {
  return fold_fn(node3(), node4());
}

int root() {
  return fold_fn(node5(), node6());
}

int main() {
  return root();
}
