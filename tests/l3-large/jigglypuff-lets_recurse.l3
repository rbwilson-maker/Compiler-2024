//test return 1993

/* go nested test
 *
 * Brandon Perez (bmperez)
 * Xiaofan Li (xli2)
 * Sunday, October 11, 2015 at 10:00:18 PM EDT
 *
 * Test for paser efficiency for nested function calls
 */

// double branch recursive call
int handle_b(int b)
{
    if (b == 0) {
        return 0; 
    }
    int b1 = handle_b((b%6) / 5); 
    int b2 = handle_b((b%5) / 6); 
    return ((b1 > b2) ? b1 : b2);
}

// single branch recursive call
int handle_c(int c, bool h) 
{
    if (c == 1) {
        return 1; 
    }
    return (h ? handle_c(c-1, h) : (c + handle_c(c-1, !h)));
}

// not recursive
int handle_d(int d) 
{
    return (d - 1);
}

int handle_e(int e) 
{
    return (e + 1);
}

int handle_f(int f, bool h) 
{
    return (h ? (f-1) : f);
}

int starting (int a, int b, int c, int d, int e, int f, int g, bool h) 
{
    if (a == 0) {
        return (b + c + d + e + f); 
    }
    
    bool hh = (((g >> a) & 1) == 1); 
    int bb = handle_b(b); 
    int cc = handle_c(c, hh); 
    int dd = handle_d(d); 
    int ee = handle_e(e); 
    int ff = handle_f(f, hh); 
    
    return starting(a-1, bb, cc, dd, ee, ff, g, hh);
}


int main()
{
    int seed = 0xdeadbeef; 
    return starting(22, 9, 1992, 8, 7, 1993, seed, true);  
}
