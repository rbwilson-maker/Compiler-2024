//test div-by-zero
//dsqrt computes the discrete sqrt, i.e. floor(sqrt(x)) using binary search
//power computes the p-th power of x using repeated squares
//nsqrt computes the n-th digit of the fraction part of sqrt(x)
//2-th digit of sqrt(2) is 1, 2-th digit of sqrt(13) is 0.

int dsqrt(int x) {
  int l = 0;
  int r = x / 2;
  while (l <= r) {
    int m = (l + r) / 2;
    if (m * m > x) {
      r = m - 1;
    } else {
      l = m + 1;
    }
  }
  return r;
}

int power(int x, int p) {
  if (p == 0) return 1;
  if (p == 1) return x;
  int temp = power(x, p / 2);
  if (p % 2 == 0) return temp * temp;
  return temp * temp * x;
}

int nsqrt(int x, int n) { return dsqrt(x * power(10, n * 2)) % 10; }

int main() { return nsqrt(2, 2) / nsqrt(13, 2); }
