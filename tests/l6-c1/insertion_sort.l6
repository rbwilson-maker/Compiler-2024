//test return 1
//This is basically just a selection sort, basically the same one
//that we used in one of the 122 labs way back when.

void swap(int[] a, int i, int j)
//@requires 0 <= i && i < \length(a);
//@requires 0 <= j && j < \length(a);
{
    int save = a[i];
    a[i] = a[j];
    a[j] = save;
}

bool is_sorted(int[] a, int lower, int upper)
//@requires 0 <= lower && lower <= \length(a);
//@requires 0 <= upper && upper <= \length(a);
//@requires lower <= upper;
{
    if (lower == upper){
        return true;
    }
    for (int start = lower; start < upper; start++){
        for(int i = start+1; i < upper; i++){
            if (a[start] > a[i]){
                return false;
            }
        }
    }
    return true;
}

void sort(int[] a, int n)
//@requires n == \length(a);
//@ensures is_sorted(a, 0, n);
{
    for (int i = 0; i < n; i++)
    //@loop_invariant 0 <= i && i <= n;
    //@loop_invariant is_sorted(a, 0, i);
    {
        int minimum = i;
        for (int j = i+1; j < n; j++)
        //@loop_invariant i <= j && j <= n;
        //@loop_invariant i <= minimum && minimum <= n;
        {
            if (a[j] < a[minimum]){
                minimum = j;
            }
        }
        swap(a, i, minimum);
    }
}

int main() {
  int [] a = alloc_array(int, 100);
  for (int i = 0; i < 100; i++) {
    a[i] = 100 - i;
  }
  sort(a, 100);
  for (int i = 0; i < 100; i++) {
    assert(a[i] == i+1);
  }
  return 1;
}
