//test return 0
//This is basically just the concatination of my files for ropes from 122.

/**********************************/
/* Client implementation for hset */
/**********************************/

// You're not obligated to respect the interface of ropes
// here, because you're using this client implementation as part of
// your ropes implementation. However, you can't access the fields of
// ropes in this file because the struct rope_node has been declared
// (in ropes.c0) but not defined.

// You'll need to change this client interface.

// typedef _____________* elem
typedef struct rope_node* elem; 

int rope_length(elem x);
char rope_charat(elem x, int i);
string rope_tostring(elem x);

int elem_hash(elem x) 
//@requires x != NULL;
{
  int m = rope_length(x);
  int r = 1;
  for(int i = 0; i < m; i++){
    r = r * 31 + char_ord(rope_charat(x, i));
  }
  return r;
  //return *x * 1664525 + 1013904223;
}

bool elem_equal(elem x, elem y) 
//@requires x != NULL && y != NULL;
{
  return string_equal(rope_tostring(x), rope_tostring(y));
}

/* 
 * Hash sets, implemented with separate chaining
 * 
 */

/*************************/
/*** Client Interface ****/
/*************************/

// typedef _______* elem;

// f(x, y) returns true if x and y contain equal keys
bool elem_equal(elem x, elem y)
/*@requires x != NULL && y != NULL; @*/ ;

// f(x) returns the hash value of x's key
int elem_hash(elem x)
/*@ requires x != NULL; @*/ ;


/**************************/
/*** Library Interface ****/
/**************************/

// typedef ________ hset;
typedef struct hset_header* hset;

int hset_size(hset H);

hset hset_new(int capacity)
/*@requires capacity > 0; @*/ ;

// Returns the element of H with the same key as x, if it exists.
// Otherwise returns NULL.
elem hset_lookup(hset H, elem x)
/*@requires x != NULL; @*/ ;

void hset_insert(hset H, elem x)
/*@requires x != NULL; @*/ ;


/******************/
/* Implementation */
/******************/

struct chain_node {
  elem data;
  struct chain_node* next;
};
typedef struct chain_node chain;

struct hset_header {
  int size;
  int capacity;               /* 0 < capacity */
  chain*[] table;             /* \length(table) == capacity */
};

/** 
*   ======================================
*   IMPLEMENTATION OF C0 LIBRARY FUNCTIONS
*   ======================================
*/

int abs(int i){
    if (i < 0) return -i;
    return i;
}
int min(int i, int j){
    return (i < j) ? i : j;
}
string string_sub(string s, int start, int end){
    if (start == end) return "";
    char[] substr = alloc_array(char, end-start+1);
    int len = end - start;
    for(int i=0; i<len; i++){
        substr[i] = string_charat(s, start+i);
    }
    substr[len] = '\0';
    return string_from_chararray(substr);
}


int hashindex(hset H, elem x) 
//@requires H != NULL && H->capacity > 0;
//@requires x != NULL;
//@ensures 0 <= \result && \result < H->capacity;
{
  return abs(elem_hash(x) % H->capacity);
}

// All hash values are correct for the current index
bool is_chain(hset H, chain* p, int i) 
//@requires H != NULL && H->capacity > 0;
{
  if (p == NULL) return true;
  return p->data != NULL 
    && hashindex(H, p->data) == i
    && is_chain(H, p->next, i);
}

bool is_chains(hset H, int lo, int hi) 
//@requires H != NULL && H->capacity > 0;
//@requires \length(H->table) == H->capacity;
//@requires 0 <= lo && lo <= hi && hi <= H->capacity;
{
  if (lo == hi) return true;
  return is_chain(H, H->table[lo], lo) 
    && is_chains(H, lo+1, hi);
}

bool is_hset(hset H) {
  return  H != NULL
    && H->capacity > 0
    && H->size >= 0 
    && is_chains(H, 0, H->capacity);
}

hset hset_new(int capacity)
//@requires capacity > 0;
//@ensures is_hset(\result);
{
  hset H = alloc(struct hset_header);
  H->size = 0;
  H->capacity = capacity;
  H->table = alloc_array(chain*, capacity);
  return H;
}

elem hset_lookup(hset H, elem x)
//@requires is_hset(H);
//@requires x != NULL;
{
  int i = hashindex(H, x);
  for (chain* p = H->table[i]; p != NULL; p = p->next)
  //@loop_invariant is_chain(H, p, i);
  {
    if (elem_equal(p->data, x)) {
      return p->data;
    }
  }

  return NULL;
}

void hset_insert(hset H, elem x) 
//@requires is_hset(H);
//@requires x != NULL;
//@ensures is_hset(H);
//@ensures x == hset_lookup(H, x);
{
  int i = hashindex(H, x);
  for (chain* p = H->table[i]; p != NULL; p = p->next)
  //@loop_invariant is_chain(H, p, i);
  {
    if (elem_equal(p->data, x)) {
      p->data = x;
      return;
    }
  }
  
  // prepend new element
  chain* p = alloc(chain);
  p->data = x;
  p->next = H->table[i];
  H->table[i] = p;
  (H->size)++;
}

typedef struct rope_node rope;
struct rope_node {
    int len;
    rope* left;
    rope* right;
    string data;
};

/*int min(int a, int b){
    if(a < b)
        return a;
    return b;
}*/

int check_rope(rope* R, int n);
int check_loop(rope* R, rope* S, int n);
rope* rope_new(string s);

bool is_rope(rope* R){
    int n = 0;
    while(check_rope(R, n) == 0)
        n++;
    return check_rope(R, n) > 0;
}

int check_rope(rope* R, int n){
    if(R == NULL)
        return 1;
    if(n == 0)
        return 0;
    if(R->left == NULL && R->right == NULL){
        if(R->len > 0 && string_length(R->data) == R->len)
            return 1;
    }
    else{
        if(R->left == NULL || R->right == NULL)
            return -1;
        int a = min(check_rope(R->left, n-1), check_loop(R->left, R, n-1));
        int b = min(check_rope(R->right, n-1), check_loop(R->right, R, n-1));
        if (a == -1 || b == -1)
            return -1;
        if (a == 0 || b == 0)
            return 0;
        if (R->len == R->left->len + R->right->len)
            return 1;
        return -1;
    }
    return -1;
}

int check_loop(rope* curNode, rope* compareNode, int depth){
    if(curNode == NULL)
        return 1;
    if(curNode == compareNode)
        return -1;
    if(depth == 0)
        return 0;
    rope* u = curNode;
    rope* o = compareNode;
    int d = depth;
    return min(check_loop(u->left,o,d-1),check_loop(u->right,o,d-1));
}

int rope_length(rope* R)
//@requires is_rope(R);
//@ensures is_rope(R);
{
    if(R == NULL)
        return 0;
    return R->len;
}

rope* rope_join(rope* R, rope* S)
//@requires is_rope(R) && is_rope(S);
//@requires rope_length(R) <= int_max() - rope_length(S);
//@ensures is_rope(\result);
{
    if(R == NULL)
        return S;
    if(S == NULL)
        return R;
    rope* r = rope_new("a");
    r->left = R;
    r->right = S;
    r->len = rope_length(R) + rope_length(S);
    return r;
}

rope* rope_new(string s)
//@ensures is_rope(\result);
{
    if (string_equal(s, ""))
        return NULL;
    else{
        rope* r = alloc(rope);
        r->data = s;
        r->len = string_length(s);
        return r;
    }
}

string rope_tostring(rope* R)
//@requires is_rope(R);
{
    if(R == NULL)
        return "";
    if(R->left == NULL && R->right == NULL)
        return R->data;
    return string_join(rope_tostring(R->left),rope_tostring(R->right));
}

char rope_charat(rope* R, int i)
//@requires is_rope(R);
//@requires 0 <= i && i < rope_length(R);
{
    if(R->left == NULL && R->right == NULL)
        return string_charat(R->data, i);
    if(i < R->left->len)
        return rope_charat(R->left, i);
    else
        return rope_charat(R->right, i - R->left->len);
}

rope* rope_sub(rope* R, int lo, int high)
//@requires is_rope(R);
//@requires 0 <= lo && lo <= high && high <= rope_length(R);
//@ensures is_rope(\result);
{
    if(R == NULL)
        return rope_new("");
    if(lo == high)
        return rope_new("");
    if (lo == 0 && high == R->len)
        return R;
    if (R->left == NULL && R->right == NULL)
        return rope_new(string_sub(R->data, lo, high));
    if(high <= R->left->len)
        return rope_sub(R->left, lo, high);
    if(lo >= R->left->len)
        return rope_sub(R->right, lo - R->left->len, high - R->left->len);
    rope* r = rope_new("a");
    r->left = rope_sub(R->left, lo, R->left->len);
    r->right = rope_sub(R->right, 0, high - R->left->len);
    r->len = r->left->len + r->right->len;
    return r;
}

rope* ropeReduce(rope* R, hset H)
//@requires is_rope(R);
//@ensures is_rope(\result);
{
    rope* r = hset_lookup(H, R);
    if(r != NULL)
        return r;
    if(R->left == NULL && R->right == NULL){
        hset_insert(H,R);
        return R;
    }
    R->left = ropeReduce(R->left, H);
    R->right = ropeReduce(R->right, H);
    R->len = R->left->len + R->right->len;
    hset_insert(H,R);
    return R;
}


rope* ropereduce(rope* R, hset H)
//@requires is_rope(R);
//@ensures is_rope(\result);
{
    if(R == NULL)
        return NULL; 
    return ropeReduce(R, H);
}

void rope_reduce(rope*[] Rs, int s)
//@requires \length(Rs) == s;
{
    hset H = hset_new(s*10);
    for(int i = 0; i < s; i++){
        Rs[i] = ropereduce(Rs[i], H);
    }
}

bool testTheRopes(){
   assert(is_rope(NULL));
    
   rope* R = alloc(rope);
   assert(!is_rope(R));

   R->data = "cat";
   R->len = 3;
   assert(is_rope(R));
  
   rope* S = alloc(rope);
   S->left = R;
   assert(!is_rope(S));
   S->len = 3;
   assert(!is_rope(S));
   S->right = R;
   assert(!is_rope(S));
   S->len = 6;
   assert(is_rope(S));

   rope* T = alloc(rope);
   T->left = S;
   T->right = R;
   T->len = 9;
   assert(is_rope(T));

   rope* U = alloc(rope);
   U->data = "bird";
   U->len = 2;
   assert(!is_rope(U));
   U->len = 4;
   assert(is_rope(U));

   rope* V = alloc(rope);
   V->data = "no";
   V->len = 1;
   V->left = T;
   V->right = U;
   assert(!is_rope(V));
   V->len = 13;
   assert(is_rope(V));

   rope* W = alloc(rope);
   W->data = "hello";
   W->len = 5;
   assert(is_rope(W));

   rope* X = alloc(rope);
   X->data = "goodbye";
   X->len = 7;
   X->right = W;
   X->left = V;
   assert(!is_rope(X));
   X->len = 18;
   assert(is_rope(X));
   W->left = X;
   W->right = R;
   assert(!is_rope(X));

   rope* Y = alloc(rope);
   Y->left = X;
   Y->right = W;
   Y->len = 23;
   assert(!is_rope(X));
   W->left = R;
   W->len = 6;
   X->len = 19;
   Y->len = 25;
   assert(is_rope(Y));

   rope* Z = alloc(rope);
   assert(!is_rope(Z));
   Z->data = "texture";
   Z->len = 7;
   assert(is_rope(Z));
   R->right = Z;
   R->left = Y;
   assert(!is_rope(Y));
   assert(!is_rope(S));

   X->data = "";
   X->len = 0;
   X->left = Y;
   X->right = Z;
   Y->data = "";
   Y->len = 0;
   Y->left = Z;
   Y->right = X;
   Z->data = "";
   Z->len = 0;
   Z->left = X;
   Z->right = Y;
   assert(!is_rope(X));
   
   return true;
}

int main(){
    testTheRopes();
    return 0;
}
