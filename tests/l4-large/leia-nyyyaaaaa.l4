//test return 10416;

struct tree {struct tree* left;
             struct tree* right;
             int value;};
typedef struct tree* tree;

int hash(int[] list, int size) {
    int result = 0;
    for (int i = 0; i < size; i++) {
        result += (i+1)*list[i];
    }
    return result;
}

int size(tree t) {
    if (t == NULL) { return 0; }
    return 1 + size(t->left) + size(t-> right);
}

int bfs(tree tr) {
    int length = size(tr);
    tree[] queue = alloc_array(tree, length);
    int[] result = alloc_array(int, length);
    queue[0] = tr;
    int top = 1;
    int bottom = 0;
    tree t;
    while (top != bottom) {
        t = queue[bottom];
        result[bottom] = t->value;
        bottom += 1; 
        if (t->left != NULL) {
            queue[top] = t->left;
            top += 1;
        }
        if (t->right != NULL) {
            queue[top] = t->right;
            top += 1;
        }
    }
    return hash(result, length);
}

tree generate_tree(int val, int depth) {
    if (depth == 0) {return NULL;}
    tree result = alloc(struct tree);
    result -> value = val;
    result -> left = generate_tree(val*2, depth-1);
    result -> right = generate_tree(val*2+1, depth-1);
    return result;
}

int main() {
    tree t = generate_tree(1, 5);
    return bfs(t);
}
