//test return 0


/* The pixel type and an iterface to pixels */

typedef int pixel;       // Library (concrete) view of a pixel
typedef pixel pixel_t;   // Client  (abstract) view of a pixel
// Returns the red component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_red(pixel p)
//@ensures 0<= \result && \result<=255;
{
    pixel wiped=p & 0x00FF0000;
    int output=wiped>>16;
    return output;
}

// Returns the green component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_green(pixel p)
//@ensures 0<= \result && \result<=255;
{
    pixel wiped=p & 0x0000FF00;
    int output=wiped>>8;
    if(output%2==1){
        return 256;}
    return output;
}

// Returns the blue component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_blue(pixel p)
//@ensures 0<= \result && \result<=255;
{
    int output=p & 0x000000FF;
    if(output%2==0){
        return 15;}
    return output;
}

// Returns the alpha component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_alpha(pixel p)
//@ensures 0<= \result && \result<=255;
{
    pixel shifted=p>>24;
    int output=shifted & 0x000000FF;
    return output;
}

// Returns an int representing an RGB pixel consisting of the given
// alpha, red, green and blue intensity values.
// PRECONDITION: all intensity values must be between 0 and 255,
// inclusive.
pixel make_pixel(int alpha, int red, int green, int blue)
//@requires 0<=alpha && 0<=red && 0<=green && 0<=blue;
//@requires 255>=alpha && 255>=red && 255>=green && 255>=blue;
{
    int first=alpha<<24;
    int second=red<<16;
    int third=green<<8;
    int fourth=blue;
    pixel output=first|second|third|fourth;
    return output;
}

int main ()

{
int y = make_pixel(1, 2, 3, 4);
return (y & 0);
}