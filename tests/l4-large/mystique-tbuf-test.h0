
typedef struct dll_node dll;
struct dll_node {
  elem data; /* This is defined elsewhere (gapbuf.c0 or elem-char.c0) */
  dll* next;
  dll* prev;
};

typedef struct dll_pt_header dll_pt;
struct dll_pt_header {
  dll* start; /* the first node of the list (to the left)  */
  dll* point; /* the current node of the list (where the cursor is) */
  dll* end;   /* the last node of the list (to the right) */
};

bool is_dll_pt(dll_pt* B);

bool dll_pt_at_left(dll_pt* B)  /* Returns true if the point is first  */
/*@requires is_dll_pt(B); @*/   /*   first (non-terminal) node         */
/*@ensures is_dll_pt(B); @*/;
bool dll_pt_at_right(dll_pt* B) /* Returns true if the point is last   */
/*@requires is_dll_pt(B); @*/    /*   last (non-terminal) node          */
/*@ensures is_dll_pt(B); @*/;
void dll_pt_forward(dll_pt* B)  /* Moves the point forward (right)     */
/*@requires is_dll_pt(B); @*/
/*@requires !dll_pt_at_right(B); @*/
/*@ensures is_dll_pt(B); @*/;
void dll_pt_backward(dll_pt* B) /* Moves the point backward (left)     */
/*@requires is_dll_pt(B); @*/
/*@requires !dll_pt_at_left(B); @*/
/*@ensures is_dll_pt(B); @*/;
void dll_pt_delete(dll_pt* B)   /* Remove the current point            */
/*@requires is_dll_pt(B); @*/
/*@requires !dll_pt_at_left(B) || !dll_pt_at_right(B); @*/
/*@ensures is_dll_pt(B); @*/;

