//test return 113704960

// A real program, like a human might write, to find
// the determinant of a 7x7 matrix, with some syntactic
// sugar along the way.

struct matrix{
  int[][] elements;
};

typedef struct matrix * Matrix;

// Allocate an NxN matrix
Matrix mkMatrix(int n){
  Matrix m = alloc(struct matrix);
  m->elements = alloc_array(int[],n);
  for (int i = 0; i < n; i++){
    m->elements[i] = alloc_array(int,n);
  }
  return m;
}

// Copy all elements of an array except one
void copyExcept(int[] source, int[] dest, int len, int except){
  int i = 0; 
  int j = 0;
  while(i < len){
    if (i != except){
      dest[j] = source[i];
      j++;
    }
    i++;
  }
}

// Construct a sub matrix from a matrix, excluding col I and row 1
Matrix subMatrix(Matrix m, int i, int n)
{
  Matrix sub_m = mkMatrix(n-1);
  int skip = 0;
  for (int j = 1; j < n; j++){
    copyExcept(m->elements[j],sub_m->elements[j-1],n,i);
  }
  return sub_m;
}

// Deterministically determinize
int determinant(Matrix m, int n){
  assert(n >= 2);
  if (n == 2){
    return m->elements[0][0] * m->elements[1][1] - 
           m->elements[1][0] * m->elements[0][1];
  }

  int sum = 0;
  for (int j = 0; j < n; j++)
  {
    int element = m->elements[0][j];
    int sub_det = determinant(subMatrix(m,j,n),n-1);
    int cofactor = j % 2 == 0 ? -sub_det : sub_det;
    sum += element * cofactor;
  }
  return sum;
}

// Less random than your average spork
int rr(int n){
  return 11 * (n<<1) + 3 * (n<<2) - 6 * (n>>7) + 7 * (n ^ 0xFF);
}

// Initialize and compute
int main(){
  int num_elements = 7;
  Matrix m = mkMatrix(num_elements);

  for (int i = 0; i < num_elements; i++){
    for (int j = 0; j < num_elements; j++){
      m->elements[i][j] =  rr(rr(i) ^ rr(j)) % 0x15411;
    }
  }
  return determinant(m,num_elements);
}