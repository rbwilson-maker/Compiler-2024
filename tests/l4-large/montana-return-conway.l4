//test return 12

int num_nbrs(bool[][] board, int i, int j) {
  int count = 0;
  for (int x = i - 1; x <= i + 1; x++) {
    for (int y = j - 1; y <= j + 1; y++) {
      if (x >= 0 && y >= 0 && x < 6 && y < 6 && board[x][y])
        count++;
    }
  }
  return count;
}

void update_board(bool[][] board, bool[][] tempboard) {
  int nbrs;
  for (int i = 0; i < 6; i++) {
    for (int j = 0; j < 6; j++) {
      nbrs = num_nbrs(board, i, j);
      if (board[i][j]) {
        if (nbrs < 2 || nbrs > 3)
          tempboard[i][j] = false;
        else
          tempboard[i][j] = true;
      } else if (nbrs == 3) {
        tempboard[i][j] = true;
      } else {
        tempboard[i][j] = false;
      }
    }
  }
  for (int i = 0; i < 6; i++) {
    for (int j = 0; j < 6; j++) {
      board[i][j] = tempboard[i][j];
    }
  }
}

int main() {
  bool[][] board = alloc_array(bool[], 6);
  for (int i = 0; i < 6; i++) {
    board[i] = alloc_array(bool, 6);
  }
  bool[][] tempboard = alloc_array(bool[], 6);
  for (int i = 0; i < 6; i++) {
    tempboard[i] = alloc_array(bool, 6);
  }
  /* Initialize with a glider */
  board[0][2] = true;
  board[1][0] = true; board[1][2] = true;
  board[2][1] = true; board[2][2] = true;
  for (int i = 0; i < 20; i++) {
    update_board(board, tempboard);
  }
  int result = 0;
  for (int i = 0; i < 6; i++) {
    for (int j = 0; j < 6; j++) {
      if (board[i][j]) result += i + j;
    }
  }
  return result;
}
