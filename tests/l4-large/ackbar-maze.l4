//test return 19
// nested arrays, passing struct pointer

// * = start
// $ = 4 = win!
// X = > 10 = wall
// 0 = 0  = path 
// XXXXXXXXXX
// *00000000X
// XXXXXXXX0X
// X00000000X
// X$XXXXXXXX

struct game {
    int[][] maze;
    int x;
    int y;
    int max_x;
    int max_y;
    int steps;
    bool win;
};

void solve(struct game * g){

    int x = (*g).x;
    int y = (*g).y;
    int cur = (*g).maze[y][x];

    if (cur == 4){
        // win;
        (*g).win = true;
        return;
    } else {

        (*g).steps +=1;
        //set current location to a wall (so we don't backtrack)
        (*g).maze[y][x] = 11;
    
        // right
        if(x+1 < (*g).max_x && (*g).maze[y][x +1]<10){
            (*g).x +=1;
            solve(g);
            return;
        }
        // left
          if(x-1 >= 0 && (*g).maze[y][x -1]<10){
            (*g).x -=1;
            solve(g);
            return;
        }
        // up
        if(y+1 < (*g).max_y && (*g).maze[y+1][x]<10){
            (*g).y +=1;
            solve(g);
            return;
        }
        // down
        if(y-1 >= 0 && (*g).maze[y -1][x]<10){
            (*g).y -=1;
            solve(g);
            return;
        }
    }

    // could not win
    return;
}

int main(){
    
    int x = 10;
    int y = 5;
    int wall = 99;
    int money = 42;
    int [][] maze = alloc_array(int[],y);
    for(int i =0; i<y; i++){
        maze[i] = alloc_array(int, x);
    }

    for(int yi=0; yi < y; yi++){
        for(int xi=0; xi <x; xi++){
            if(yi == 0){maze[yi][xi] = wall;}
            if(yi == 1 && xi == 9){maze[yi][xi] = wall;}
            if(yi == 2 && xi != 8){maze[yi][xi] = wall;}
            if(yi == 3 && (xi == 0 || xi == 9)){maze[yi][xi] = wall;}
            if(yi == 4 && xi != 1){maze[yi][xi] = wall;}
        }
    }
    maze[4][2] = 4;
    
    struct game * new_game = alloc(struct game);
    (*new_game).maze = maze;
    (*new_game).x = 0;
    (*new_game).y = 1;
    (*new_game).max_x = x;
    (*new_game).max_y = y;

    solve(new_game);
    if((*new_game).win){
        return (*new_game).steps;
    }else{
        return -1;
    }
}
