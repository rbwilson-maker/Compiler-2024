//test return 4500

int[] make_ints(int N)
{
     int[] ints = alloc_array(int, N);

     for (int i = 1; i < N; i++) {
         ints[i] = ints[i-1] + 1;
     }
     return ints;
}

typedef int[] oneD;
typedef int[][] twoD;
typedef int[][][] threeD;

twoD make_2d(int N) {
    twoD two = alloc_array(oneD, N);
    for (int i = 0; i < N; i++) {
        two[i] = make_ints(N);
    }
    return two;
}

threeD make_3d(int N) {
    threeD three = alloc_array(twoD, N);
    for (int i = 0; i < N; i++) {
        three[i] = make_2d(N);
    }
    return three;
}

int compute_sum(threeD cube, int n1, int n2, int n3) {
    int sum = 0;
    for (int i = 0; i < n1; i++) {
        for (int j = 0; j < n2; j++) {
            for (int k = 0; k < n3; k++) {
                sum += cube[i][j][k];
            }
        }
    }
    return sum;
}

int main()
{
     // make a 10 x 10 x 10 three dimensional array
     int n = 10;
     threeD cube = make_3d(n);

     int sum = compute_sum(cube, 10, 10, 10);
     return sum;
}
