//test memerror

typedef struct gapbuf_header* gapbuf;

struct gapbuf_header {
  int limit;     /* limit > 0                      */
  int[] buffer; /* \length(buffer) == limit       */
  int gap_start; /* 0 <= gap_start                 */
  int gap_end;   /* gap_start  <= gap_end <= limit */
};

bool is_gapbuf(struct gapbuf_header* G);

bool gapbuf_empty(gapbuf G);    /* Returns true if the buffer is empty */
bool gapbuf_full(gapbuf G);     /* Returns true if the buffer is full  */
bool gapbuf_at_left(gapbuf G);  /* Returns true if the gap is at the   */
                                /*   left end of the buffer            */
bool gapbuf_at_right(gapbuf G); /* Returns true if the gap is at the   */
                                /*   right end of the buffer           */

gapbuf gapbuf_new(int limit);   /* Create a new gapbuf of size limit  */
void gapbuf_forward(gapbuf G);  /* Move the gap forward, to the right */
void gapbuf_backward(gapbuf G); /* Move the gap backward, to the left */
void gapbuf_insert(gapbuf G, int c); /* Insert the int c before the gap    */
void gapbuf_delete(gapbuf G);         /* Delete the int before the gap */

/*** Implementation ***/

bool buffer_is_expected_length(struct gapbuf_header* G) {
    //@assert \length(G->buffer) == G->limit;
    return true;
}

bool is_gapbuf(struct gapbuf_header* G) {
    return G != NULL &&
        0 <  G->limit &&
        0 <= G->gap_start &&
        G->gap_start <= G->gap_end &&
        G->gap_end <= G->limit &&
        buffer_is_expected_length(G);
}

bool gapbuf_empty(gapbuf G)
//@requires is_gapbuf(G);
//@ensures is_gapbuf(G);
{
    return G->gap_start == 0 && G->gap_end == G->limit;
}

bool gapbuf_full(gapbuf G)
//@requires is_gapbuf(G);
//@ensures is_gapbuf(G);
{
    return G->gap_start == G->gap_end;
}

bool gapbuf_at_left(gapbuf G)
//@requires is_gapbuf(G);
//@ensures is_gapbuf(G);
{
    return G->gap_start == 0;
}

bool gapbuf_at_right(gapbuf G)
//@requires is_gapbuf(G);
//@ensures is_gapbuf(G);
{
    return G->gap_end == G->limit;
}

gapbuf gapbuf_new(int limit)
//@requires limit > 0;
//@ensures is_gapbuf(\result);
//@ensures gapbuf_empty(\result);
//@ensures gapbuf_at_left(\result);
//@ensures gapbuf_at_right(\result);
{
    gapbuf G = alloc(struct gapbuf_header);
    G->limit = limit;
    G->buffer = alloc_array(int, limit);
    G->gap_start = 0;
    G->gap_end = limit;

    return G;
}

void gapbuf_forward(gapbuf G)
//@requires is_gapbuf(G);
//@requires !gapbuf_at_right(G);
//@ensures is_gapbuf(G);
//@ensures !gapbuf_at_left(G);
{
    int[] buf = G->buffer;
    buf[G->gap_start] = buf[G->gap_end];
    (G->gap_start)++;
    (G->gap_end)++;
}

void gapbuf_backward(gapbuf G)
//@requires is_gapbuf(G);
//@requires !gapbuf_at_left(G);
//@ensures is_gapbuf(G);
//@ensures !gapbuf_at_right(G);
{
    int[] buf = G->buffer;
    buf[(G->gap_end) - 1] = buf[(G->gap_start) - 1];
    (G->gap_start)--;
    (G->gap_end)--;
}

void gapbuf_insert(gapbuf G, int c)
//@requires is_gapbuf(G);
//@requires !gapbuf_full(G);
//@ensures is_gapbuf(G);
//@ensures !gapbuf_empty(G);
{
    (G->buffer)[G->gap_start] = c;
    (G->gap_start)++;
}

void gapbuf_delete(gapbuf G)
//@requires is_gapbuf(G);
//@requires !gapbuf_empty(G);
//@requires !gapbuf_at_left(G);
//@ensures is_gapbuf(G);
//@ensures !gapbuf_full(G);
{
    (G->gap_start)--;
}

int main() {
  gapbuf G = gapbuf_new(16);
  gapbuf_insert(G, 122);
  gapbuf_backward(G);
  gapbuf_insert(G, 15);
  gapbuf_forward(G);
  gapbuf_insert(G, 15);
  gapbuf_insert(G, 213);
  gapbuf_insert(G, 15);
  gapbuf_insert(G, 411);
  gapbuf_delete(G);
  gapbuf_delete(G);
  gapbuf_delete(G);
  gapbuf_delete(G);
  gapbuf_delete(G);
  gapbuf_delete(G);
  gapbuf_delete(G);
  gapbuf_delete(G);
  gapbuf_insert(G, 15);
  return 0;
}
