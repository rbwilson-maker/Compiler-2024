//test memerror

struct uba {
  int size;
  int capacity;
  int[] a;
};
typedef struct uba* uba;
uba new_uba(int capacity);
int index(uba u, int i);
void append(uba u, int i);
int pop(uba u);


int main() {
  uba u = new_uba(4);
  for (int i = 0; i < 20; i++)
    append(u, i + 1);
  int total = 0;
  for (int i = 0; i < u->size; i++) {
    total += index(u, i);
  }
  for (int i = u->capacity; i > 0; i--) {
    pop(u);
  }
  return total + u->capacity;
}

uba new_uba(int capacity) {
  uba u = alloc(struct uba);
  u->size = 0;
  u->capacity = capacity;
  u->a = alloc_array(int, capacity);
  return u;
}

int index(uba u, int i) {
  return u->a[i];
}

void append(uba u, int x) {
  if (u->size == u->capacity) {
    int[] new = alloc_array(int, 2 * u->capacity);
    for (int i = 0; i < u->size; i++)
      new[i] = u->a[i];
    new[u->size] = x;
    u->size = u->size + 1;
    u->capacity *= 2;
    u->a = new;
  } else {
    u->a[u->size] = x;
    u->size++;
  }
}

int pop(uba u) {
  u->size--;
  int ret = u->a[u->size];
  if (u->size > 0 && u->size < u->capacity / 4) {
    int[] new = alloc_array(int, u->capacity / 2);
    for (int i = 0; i < u->size - 1; i++)
      new[i] = u->a[i];
    u->a = new;
    u->capacity /= 2;
    u->size -= 1;
  }
  return ret;
}

