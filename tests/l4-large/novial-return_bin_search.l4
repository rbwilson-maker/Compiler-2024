//test return 0
// check binary search values on example array


int binarySearch(int target, int[] arr, int len) {
  int low = 0;
  int high = len;
  while (low < high) {
    int ind = low + (high - low) /2;
    if (arr[ind] == target) return ind;
    if (arr[ind] < target) {
      low = ind + 1;
    } else {
      high = ind;
    }
  }
  return -1;
}

int main() {
  int[] arr = alloc_array(int, 12);
  for (int i = 0; i < 12; i++) {
    arr[i] = (i*i + 5) % (i * 3 + 1);
  }

  for (int i = 0; i < 12; i++) {
    if (i == 0) arr[i] = 3;
    else arr[i] = arr[i-1] + arr[i];
  }

  assert(binarySearch(3, arr, 12) != -1);
  assert(binarySearch(5, arr, 12) != -1);
  assert(binarySearch(7, arr, 12) != -1);
  assert(binarySearch(11, arr, 12) != -1);
  assert(binarySearch(19, arr, 12) != -1);
  assert(binarySearch(33, arr, 12) != -1);
  assert(binarySearch(36, arr, 12) != -1);
  assert(binarySearch(46, arr, 12) != -1);
  assert(binarySearch(65, arr, 12) != -1);
  assert(binarySearch(67, arr, 12) != -1);
  assert(binarySearch(79, arr, 12) != -1);
  assert(binarySearch(103, arr, 12) != -1);
  assert(binarySearch(-12, arr, 12) == -1);
  assert(binarySearch(18, arr, 12) == -1);

  return 0;
}

