//test return 139
// functional list manipulation

typedef int elem;

struct list {
  elem e;
  struct list *next;
};
typedef struct list *list;

list nil() {
  return NULL;
}

list cons(elem e, list L) {
  list head = alloc(struct list);
  head->e = e;
  head->next = L;
  return head;
}

elem head(list L) {
  return L->e;
}

list tail(list L) {
  return L->next;
}

list from_array(elem[] A, int lower, int upper) {
  if (lower == upper) return nil();
  return cons(A[lower], from_array(A, lower+1, upper));
}

int len(list L) {
  if (L == nil()) return 0;
  return 1 + len(tail(L));
}

void to_array_put(list L, int[] A, int i) {
  if (L == nil()) return;
  A[i] = head(L);
  to_array_put(tail(L), A, i+1);
}

elem[] to_array(list L) {
  int length = len(L);
  int[] result = alloc_array(elem, length);
  to_array_put(L, result, 0);
  return result;
}

// --------------------------------------------------------------------------

list snoc(list L, elem e) {
  if (L == nil()) return cons(e, L);
  return cons(head(L), snoc(tail(L), e));
}

list rotate(list L) {
  return snoc(tail(L), head(L));
}

list rotateN(list L, int n) {
  if (n == 0) return L;
  return rotate(rotateN(L, n-1));
}

int main() {
  elem[] A = alloc_array(elem, 11);
  A[10] = 7;
  A[0] = 0;
  A[1] = 3;
  A[2] = 2;
  A[5] = 1;
  A[3] = 8;
  A[4] = 9;
  A[7] = 10;
  A[6] = 4;
  A[8] = 6;
  A[9] = 5;

  elem[] B = to_array(rotateN(from_array(A, 0, 11), 11));
  assert(B[10] == 7);
  assert(B[0] == 0);
  assert(B[1] == 3);
  assert(B[2] == 2);
  assert(B[5] == 1);
  assert(B[3] == 8);
  assert(B[4] == 9);
  assert(B[7] == 10);
  assert(B[6] == 4);
  assert(B[8] == 6);
  assert(B[9] == 5);

  return 139;
}
