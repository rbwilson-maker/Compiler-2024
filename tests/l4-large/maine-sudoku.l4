//test return 1305974171

// Sudoku solver, uses branch and bound to search solutions, making choices
// such that backtracking is minimized.

struct cell {
    int value;
    int[] possVals;
    int possibilities;
};

typedef struct cell cell;

int move(cell[] board);
int chooseMove(cell[] board, int* row, int* col);
int printBoard(cell[] board);
int applyMove(cell[] board, int[] adjustments, int row, int col, int value);
int undoMove(cell[] board, int[] adjustments, int row, int col, int value);
int solve(cell[] board);
void analyze(cell[] board);
void findPossibilities(cell[] board, int row, int col);
int[] getBoard(int i);

int main() {

    int checkSum = 0;

    for(int k = 1; k<=10; k++) {
        cell[] board = alloc_array(cell, 9*9);

        int[] startVals = getBoard(k);
        for(int i=0; i<9*9; i++) {
            board[i].value = startVals[i];
            board[i].possVals = alloc_array(int, 9);
        }

        printBoard(board); // print unsolved puzzle
        solve(board);
        checkSum += printBoard(board); // print solved puzzle
    }

    return checkSum;
}

int solve(cell[] board) {
    analyze(board);  // Initial analysis of board
    return move(board);  // Start backtracking algorithm
}

void analyze(cell[] board) {    
    // Initialize possible values for each cell
    for(int row=0; row<9; row++) {
	for(int col=0; col<9; col++) {
	    for(int i=0; i<9; i++) {
		board[row*9 + col].possVals[i] = i+1;
	    }
	}
    }

    // Remove impossible values (numbers which are already used 
    // elsewhere in row/column/square
    for(int row=0; row<9; row++) {
	for(int col=0; col<9; col++) {
	    if(board[row*9+col].value == 0) {
		findPossibilities(board, row, col);
	    }
	}
    }
}

void findPossibilities(cell[] board, int row, int col) {
    // Eliminate values already used in this row
    for(int j=0; j<9; j++) {
	int value = board[row*9 + j].value;
	if(value != 0) 
	    board[row*9 + col].possVals[value-1] = 0;
    }

    // Eliminate values already used in this column
    for(int i=0; i<9; i++) {
	int value = board[i*9 + col].value;
	if(value != 0)
	    board[row*9 + col].possVals[value-1] = 0;
    }

    // Eliminate values already used in this square
    int squareRow = (row/3)*3;  // Top row of this sub-square
    int squareCol = (col/3)*3;  // Left col of this sub-square
    
    for(int i=squareRow; i<squareRow+3; i++) {
	for(int j=squareCol; j<squareCol+3; j++) {
	    int value = board[i*9 + j].value;
	    if(value != 0)
		board[row*9 + col].possVals[value-1] = 0;
	}
    }
}

// Backtracking algorithm implementation
int move(cell[] board) {
    int* row = alloc(int);
    int* col = alloc(int);
    *row = 0;
    *col = 0;

    int chosenCell = chooseMove(board, row, col);
    if(chosenCell == -1)
	return -1;  // Failed. Were open cells, but no possible values for them
    if(chosenCell == 0)
	return 0;  // Success. No open cells left.

    // Array to track changes due to this move. Store index (row*9+col) of cell for which
    // possVals was adjusted, for potentially all cells in row, col, and square (3*9)
    int[] adjustments = alloc_array(int, 3*9+1);

    // Iterate over, and make move for, each possible values for this cell
    for(int i=0; i<9; i++) {
	if(board[(*row)*9 + *col].possVals[i] != 0) {
	    applyMove(board, adjustments, *row, *col, i+1);
	    if(move(board) == 0)
		return 0; // Success
	    else
		undoMove(board, adjustments, *row, *col, i+1); // Undo, so we can try next value
	}
    }

    return -1;  //Failed. None of possible values for this cell were sucessful.
}

int chooseMove(cell[] board, int* row, int* col) {
    *row = -1; // Row of open square with fewest possibilites
    *col = -1; // Column of open square with fewest possibilities
    int minPoss = 9+1;  // Number of possible values for cell with fewest

    // Find cell with fewest possible values
    for(int i=0; i<9; i++) {
	for(int j=0; j<9; j++) {

	    // If cell does not yet have a value
	    if(board[i*9+j].value == 0) {
		// Count possible values for cell
		int possibilities = 0;
	        for(int k=0; k<9; k++) {
		    if(board[i*9+j].possVals[k] != 0)
			possibilities++;
		}
		
		// Check for open square without possible value
		if(possibilities == 0) {
		    return -1; // This is a failed branch. Need to backtrack.
		}
		
		if(possibilities < minPoss) {
		    *row = i;
		    *col = j;
		    minPoss = possibilities;
		}
	    }
	}
    }

    if(*row == -1)
	return 0;  // Success. No open squares remaining
    else
	return 1; // Use board[row, col] for next move
}

int applyMove(cell[] board, int[] adjustments, int row, int col, int value) {
    // Apply value to cell
    board[row*9 + col].value = value;

    int changeNumber = 0;

    // Update possibilites for remaining cells
    // In this row...
    for(int j=0; j<9; j++) {
	//int value = board[row*9 + j].value;
	if(board[row*9 + j].value == 0) {
	    if(board[row*9 + j].possVals[value-1] != 0) {
		board[row*9 + j].possVals[value-1] = 0;  // This is no longer a possibility
		adjustments[changeNumber] = row*9+j; // Add it to list of adjustmemts
                changeNumber++;
	    }
	}
    }

    // ... in this column ...
    for(int i=0; i<9; i++) {
	//int value = board[i*9 + col].value;
	if(board[i*9 + col].value == 0) {
	    if(board[i*9 + col].possVals[value-1] != 0) {
                board[i*9 + col].possVals[value-1] = 0;
                adjustments[changeNumber] = i*9+col;
                changeNumber++;
	    }
	}
    }

    // ... and in this square.
    int squareRow = (row/3)*3;  // Top row of this sub-square
    int squareCol = (col/3)*3;  // Left col of this sub-square
    
    for(int i=squareRow; i<squareRow+3; i++) {
	for(int j=squareCol; j<squareCol+3; j++) {
	    //int value = board[i*9 + j].value;
	    if(board[i*9 + j].value == 0) {
		if(board[i*9 + j].possVals[value-1] != 0) {
		    board[i*9 + j].possVals[value-1] = 0;
		    adjustments[changeNumber] = i*9+j;
                    changeNumber++;
		}
	    }
	}
    }

    adjustments[changeNumber] = -1;  // Signal end of adjustments
    return 0;
}

int undoMove(cell[] board, int[] adjustments, int row, int col, int value) {
    board[row*9 + col].value = 0;

    // Undo adjustments
    int changeNumber = 0;
    while(adjustments[changeNumber] != -1) {
	board[adjustments[changeNumber]].possVals[value-1] = value;
        changeNumber++;
    }

    return 0;
}

int printBoard(cell[] board) {
/*
    char boardFormat[] = "%i | %i | %i || %i | %i | %i || %i | %i | %i\n";

    for(int i=0; i<9; i++) {
	printf(boardFormat,
	       board[i*9].value,
	       board[i*9 + 1].value,
	       board[i*9 + 2].value,
	       board[i*9 + 3].value,
	       board[i*9 + 4].value,
	       board[i*9 + 5].value,
	       board[i*9 + 6].value,
	       board[i*9 + 7].value,
	       board[i*9 + 8].value);
	if(i==2 || i==5)
	    printf("===================================\n");
	else if(i != 8)
	    printf("--+---+---++---+---+---++---+---+--\n");
    }
*/

    // Pretty printing is hard without strings...
    int checkSum = 0;

    for(int i=0; i<9; i++) {
        int printNum = 0;
        int multiplier = 1;
        for(int j=0; j<9; j++) {
            printNum += board[i*9+j].value * multiplier;
            multiplier *= 10; 
        }

        print_int(printNum);
	checkSum += (printNum + 0xf23dcb2a) << i;
    }

    return checkSum;
}

int[] getBoard(int n) {
    int[] board = alloc_array(int, 9*9);

    if(n==1) {
        board[0] = 0;
        board[1] = 0;
        board[2] = 3;
        board[3] = 0;
        board[4] = 2;
        board[5] = 0;
        board[6] = 6;
        board[7] = 0;
        board[8] = 0;
        board[9] = 9;
        board[10] = 0;
        board[11] = 0;
        board[12] = 3;
        board[13] = 0;
        board[14] = 5;
        board[15] = 0;
        board[16] = 0;
        board[17] = 1;
        board[18] = 0;
        board[19] = 0;
        board[20] = 1;
        board[21] = 8;
        board[22] = 0;
        board[23] = 6;
        board[24] = 4;
        board[25] = 0;
        board[26] = 0;
        board[27] = 0;
        board[28] = 0;
        board[29] = 8;
        board[30] = 1;
        board[31] = 0;
        board[32] = 2;
        board[33] = 9;
        board[34] = 0;
        board[35] = 0;
        board[36] = 7;
        board[37] = 0;
        board[38] = 0;
        board[39] = 0;
        board[40] = 0;
        board[41] = 0;
        board[42] = 0;
        board[43] = 0;
        board[44] = 8;
        board[45] = 0;
        board[46] = 0;
        board[47] = 6;
        board[48] = 7;
        board[49] = 0;
        board[50] = 8;
        board[51] = 2;
        board[52] = 0;
        board[53] = 0;
        board[54] = 0;
        board[55] = 0;
        board[56] = 2;
        board[57] = 6;
        board[58] = 0;
        board[59] = 9;
        board[60] = 5;
        board[61] = 0;
        board[62] = 0;
        board[63] = 8;
        board[64] = 0;
        board[65] = 0;
        board[66] = 2;
        board[67] = 0;
        board[68] = 3;
        board[69] = 0;
        board[70] = 0;
        board[71] = 9;
        board[72] = 0;
        board[73] = 0;
        board[74] = 5;
        board[75] = 0;
        board[76] = 1;
        board[77] = 0;
        board[78] = 3;
        board[79] = 0;
        board[80] = 0;
    }

    if(n==2) {
        board[0] = 2;
        board[1] = 0;
        board[2] = 0;
        board[3] = 0;
        board[4] = 8;
        board[5] = 0;
        board[6] = 3;
        board[7] = 0;
        board[8] = 0;
        board[9] = 0;
        board[10] = 6;
        board[11] = 0;
        board[12] = 0;
        board[13] = 7;
        board[14] = 0;
        board[15] = 0;
        board[16] = 8;
        board[17] = 4;
        board[18] = 0;
        board[19] = 3;
        board[20] = 0;
        board[21] = 5;
        board[22] = 0;
        board[23] = 0;
        board[24] = 2;
        board[25] = 0;
        board[26] = 9;
        board[27] = 0;
        board[28] = 0;
        board[29] = 0;
        board[30] = 1;
        board[31] = 0;
        board[32] = 5;
        board[33] = 4;
        board[34] = 0;
        board[35] = 8;
        board[36] = 0;
        board[37] = 0;
        board[38] = 0;
        board[39] = 0;
        board[40] = 0;
        board[41] = 0;
        board[42] = 0;
        board[43] = 0;
        board[44] = 0;
        board[45] = 4;
        board[46] = 0;
        board[47] = 2;
        board[48] = 7;
        board[49] = 0;
        board[50] = 6;
        board[51] = 0;
        board[52] = 0;
        board[53] = 0;
        board[54] = 3;
        board[55] = 0;
        board[56] = 1;
        board[57] = 0;
        board[58] = 0;
        board[59] = 7;
        board[60] = 0;
        board[61] = 4;
        board[62] = 0;
        board[63] = 7;
        board[64] = 2;
        board[65] = 0;
        board[66] = 0;
        board[67] = 4;
        board[68] = 0;
        board[69] = 0;
        board[70] = 6;
        board[71] = 0;
        board[72] = 0;
        board[73] = 0;
        board[74] = 4;
        board[75] = 0;
        board[76] = 1;
        board[77] = 0;
        board[78] = 0;
        board[79] = 0;
        board[80] = 3;
    }

    if(n==3) {
        board[0] = 0;
        board[1] = 0;
        board[2] = 0;
        board[3] = 0;
        board[4] = 0;
        board[5] = 0;
        board[6] = 9;
        board[7] = 0;
        board[8] = 7;
        board[9] = 0;
        board[10] = 0;
        board[11] = 0;
        board[12] = 4;
        board[13] = 2;
        board[14] = 0;
        board[15] = 1;
        board[16] = 8;
        board[17] = 0;
        board[18] = 0;
        board[19] = 0;
        board[20] = 0;
        board[21] = 7;
        board[22] = 0;
        board[23] = 5;
        board[24] = 0;
        board[25] = 2;
        board[26] = 6;
        board[27] = 1;
        board[28] = 0;
        board[29] = 0;
        board[30] = 9;
        board[31] = 0;
        board[32] = 4;
        board[33] = 0;
        board[34] = 0;
        board[35] = 0;
        board[36] = 0;
        board[37] = 5;
        board[38] = 0;
        board[39] = 0;
        board[40] = 0;
        board[41] = 0;
        board[42] = 0;
        board[43] = 4;
        board[44] = 0;
        board[45] = 0;
        board[46] = 0;
        board[47] = 0;
        board[48] = 5;
        board[49] = 0;
        board[50] = 7;
        board[51] = 0;
        board[52] = 0;
        board[53] = 9;
        board[54] = 9;
        board[55] = 2;
        board[56] = 0;
        board[57] = 1;
        board[58] = 0;
        board[59] = 8;
        board[60] = 0;
        board[61] = 0;
        board[62] = 0;
        board[63] = 0;
        board[64] = 3;
        board[65] = 4;
        board[66] = 0;
        board[67] = 5;
        board[68] = 9;
        board[69] = 0;
        board[70] = 0;
        board[71] = 0;
        board[72] = 5;
        board[73] = 0;
        board[74] = 7;
        board[75] = 0;
        board[76] = 0;
        board[77] = 0;
        board[78] = 0;
        board[79] = 0;
        board[80] = 0;
    }

    if(n==4) {
        board[0] = 0;
        board[1] = 3;
        board[2] = 0;
        board[3] = 0;
        board[4] = 5;
        board[5] = 0;
        board[6] = 0;
        board[7] = 4;
        board[8] = 0;
        board[9] = 0;
        board[10] = 0;
        board[11] = 8;
        board[12] = 0;
        board[13] = 1;
        board[14] = 0;
        board[15] = 5;
        board[16] = 0;
        board[17] = 0;
        board[18] = 4;
        board[19] = 6;
        board[20] = 0;
        board[21] = 0;
        board[22] = 0;
        board[23] = 0;
        board[24] = 0;
        board[25] = 1;
        board[26] = 2;
        board[27] = 0;
        board[28] = 7;
        board[29] = 0;
        board[30] = 5;
        board[31] = 0;
        board[32] = 2;
        board[33] = 0;
        board[34] = 8;
        board[35] = 0;
        board[36] = 0;
        board[37] = 0;
        board[38] = 0;
        board[39] = 6;
        board[40] = 0;
        board[41] = 3;
        board[42] = 0;
        board[43] = 0;
        board[44] = 0;
        board[45] = 0;
        board[46] = 4;
        board[47] = 0;
        board[48] = 1;
        board[49] = 0;
        board[50] = 9;
        board[51] = 0;
        board[52] = 3;
        board[53] = 0;
        board[54] = 2;
        board[55] = 5;
        board[56] = 0;
        board[57] = 0;
        board[58] = 0;
        board[59] = 0;
        board[60] = 0;
        board[61] = 9;
        board[62] = 8;
        board[63] = 0;
        board[64] = 0;
        board[65] = 1;
        board[66] = 0;
        board[67] = 2;
        board[68] = 0;
        board[69] = 6;
        board[70] = 0;
        board[71] = 0;
        board[72] = 0;
        board[73] = 8;
        board[74] = 0;
        board[75] = 0;
        board[76] = 6;
        board[77] = 0;
        board[78] = 0;
        board[79] = 2;
        board[80] = 0;
    }

    if(n==5) {
        board[0] = 0;
        board[1] = 2;
        board[2] = 0;
        board[3] = 8;
        board[4] = 1;
        board[5] = 0;
        board[6] = 7;
        board[7] = 4;
        board[8] = 0;
        board[9] = 7;
        board[10] = 0;
        board[11] = 0;
        board[12] = 0;
        board[13] = 0;
        board[14] = 3;
        board[15] = 1;
        board[16] = 0;
        board[17] = 0;
        board[18] = 0;
        board[19] = 9;
        board[20] = 0;
        board[21] = 0;
        board[22] = 0;
        board[23] = 2;
        board[24] = 8;
        board[25] = 0;
        board[26] = 5;
        board[27] = 0;
        board[28] = 0;
        board[29] = 9;
        board[30] = 0;
        board[31] = 4;
        board[32] = 0;
        board[33] = 0;
        board[34] = 8;
        board[35] = 7;
        board[36] = 4;
        board[37] = 0;
        board[38] = 0;
        board[39] = 2;
        board[40] = 0;
        board[41] = 8;
        board[42] = 0;
        board[43] = 0;
        board[44] = 3;
        board[45] = 1;
        board[46] = 6;
        board[47] = 0;
        board[48] = 0;
        board[49] = 3;
        board[50] = 0;
        board[51] = 2;
        board[52] = 0;
        board[53] = 0;
        board[54] = 3;
        board[55] = 0;
        board[56] = 2;
        board[57] = 7;
        board[58] = 0;
        board[59] = 0;
        board[60] = 0;
        board[61] = 6;
        board[62] = 0;
        board[63] = 0;
        board[64] = 0;
        board[65] = 5;
        board[66] = 6;
        board[67] = 0;
        board[68] = 0;
        board[69] = 0;
        board[70] = 0;
        board[71] = 8;
        board[72] = 0;
        board[73] = 7;
        board[74] = 6;
        board[75] = 0;
        board[76] = 5;
        board[77] = 1;
        board[78] = 0;
        board[79] = 9;
        board[80] = 0;
    }

    if(n==6) {
        board[0] = 1;
        board[1] = 0;
        board[2] = 0;
        board[3] = 9;
        board[4] = 2;
        board[5] = 0;
        board[6] = 0;
        board[7] = 0;
        board[8] = 0;
        board[9] = 5;
        board[10] = 2;
        board[11] = 4;
        board[12] = 0;
        board[13] = 1;
        board[14] = 0;
        board[15] = 0;
        board[16] = 0;
        board[17] = 0;
        board[18] = 0;
        board[19] = 0;
        board[20] = 0;
        board[21] = 0;
        board[22] = 0;
        board[23] = 0;
        board[24] = 0;
        board[25] = 7;
        board[26] = 0;
        board[27] = 0;
        board[28] = 5;
        board[29] = 0;
        board[30] = 0;
        board[31] = 0;
        board[32] = 8;
        board[33] = 1;
        board[34] = 0;
        board[35] = 2;
        board[36] = 0;
        board[37] = 0;
        board[38] = 0;
        board[39] = 0;
        board[40] = 0;
        board[41] = 0;
        board[42] = 0;
        board[43] = 0;
        board[44] = 0;
        board[45] = 4;
        board[46] = 0;
        board[47] = 2;
        board[48] = 7;
        board[49] = 0;
        board[50] = 0;
        board[51] = 0;
        board[52] = 9;
        board[53] = 0;
        board[54] = 0;
        board[55] = 6;
        board[56] = 0;
        board[57] = 0;
        board[58] = 0;
        board[59] = 0;
        board[60] = 0;
        board[61] = 0;
        board[62] = 0;
        board[63] = 0;
        board[64] = 0;
        board[65] = 0;
        board[66] = 0;
        board[67] = 3;
        board[68] = 0;
        board[69] = 9;
        board[70] = 4;
        board[71] = 5;
        board[72] = 0;
        board[73] = 0;
        board[74] = 0;
        board[75] = 0;
        board[76] = 7;
        board[77] = 1;
        board[78] = 0;
        board[79] = 0;
        board[80] = 6;
    }

    if(n==7) {
        board[0] = 0;
        board[1] = 4;
        board[2] = 3;
        board[3] = 0;
        board[4] = 8;
        board[5] = 0;
        board[6] = 2;
        board[7] = 5;
        board[8] = 0;
        board[9] = 6;
        board[10] = 0;
        board[11] = 0;
        board[12] = 0;
        board[13] = 0;
        board[14] = 0;
        board[15] = 0;
        board[16] = 0;
        board[17] = 0;
        board[18] = 0;
        board[19] = 0;
        board[20] = 0;
        board[21] = 0;
        board[22] = 0;
        board[23] = 1;
        board[24] = 0;
        board[25] = 9;
        board[26] = 4;
        board[27] = 9;
        board[28] = 0;
        board[29] = 0;
        board[30] = 0;
        board[31] = 0;
        board[32] = 4;
        board[33] = 0;
        board[34] = 7;
        board[35] = 0;
        board[36] = 0;
        board[37] = 0;
        board[38] = 0;
        board[39] = 6;
        board[40] = 0;
        board[41] = 8;
        board[42] = 0;
        board[43] = 0;
        board[44] = 0;
        board[45] = 0;
        board[46] = 1;
        board[47] = 0;
        board[48] = 2;
        board[49] = 0;
        board[50] = 0;
        board[51] = 0;
        board[52] = 0;
        board[53] = 3;
        board[54] = 8;
        board[55] = 2;
        board[56] = 0;
        board[57] = 5;
        board[58] = 0;
        board[59] = 0;
        board[60] = 0;
        board[61] = 0;
        board[62] = 0;
        board[63] = 0;
        board[64] = 0;
        board[65] = 0;
        board[66] = 0;
        board[67] = 0;
        board[68] = 0;
        board[69] = 0;
        board[70] = 0;
        board[71] = 5;
        board[72] = 0;
        board[73] = 3;
        board[74] = 4;
        board[75] = 0;
        board[76] = 9;
        board[77] = 0;
        board[78] = 7;
        board[79] = 1;
        board[80] = 0;
    }

    if(n==8) {
        board[0] = 4;
        board[1] = 8;
        board[2] = 0;
        board[3] = 0;
        board[4] = 0;
        board[5] = 6;
        board[6] = 9;
        board[7] = 0;
        board[8] = 2;
        board[9] = 0;
        board[10] = 0;
        board[11] = 2;
        board[12] = 0;
        board[13] = 0;
        board[14] = 8;
        board[15] = 0;
        board[16] = 0;
        board[17] = 1;
        board[18] = 9;
        board[19] = 0;
        board[20] = 0;
        board[21] = 3;
        board[22] = 7;
        board[23] = 0;
        board[24] = 0;
        board[25] = 6;
        board[26] = 0;
        board[27] = 8;
        board[28] = 4;
        board[29] = 0;
        board[30] = 0;
        board[31] = 1;
        board[32] = 0;
        board[33] = 2;
        board[34] = 0;
        board[35] = 0;
        board[36] = 0;
        board[37] = 0;
        board[38] = 3;
        board[39] = 7;
        board[40] = 0;
        board[41] = 4;
        board[42] = 1;
        board[43] = 0;
        board[44] = 0;
        board[45] = 0;
        board[46] = 0;
        board[47] = 1;
        board[48] = 0;
        board[49] = 6;
        board[50] = 0;
        board[51] = 0;
        board[52] = 4;
        board[53] = 9;
        board[54] = 0;
        board[55] = 2;
        board[56] = 0;
        board[57] = 0;
        board[58] = 8;
        board[59] = 5;
        board[60] = 0;
        board[61] = 0;
        board[62] = 7;
        board[63] = 7;
        board[64] = 0;
        board[65] = 0;
        board[66] = 9;
        board[67] = 0;
        board[68] = 0;
        board[69] = 6;
        board[70] = 0;
        board[71] = 0;
        board[72] = 6;
        board[73] = 0;
        board[74] = 9;
        board[75] = 2;
        board[76] = 0;
        board[77] = 0;
        board[78] = 0;
        board[79] = 1;
        board[80] = 8;
    }

    if(n==9) {
        board[0] = 0;
        board[1] = 0;
        board[2] = 0;
        board[3] = 9;
        board[4] = 0;
        board[5] = 0;
        board[6] = 0;
        board[7] = 0;
        board[8] = 2;
        board[9] = 0;
        board[10] = 5;
        board[11] = 0;
        board[12] = 1;
        board[13] = 2;
        board[14] = 3;
        board[15] = 4;
        board[16] = 0;
        board[17] = 0;
        board[18] = 0;
        board[19] = 3;
        board[20] = 0;
        board[21] = 0;
        board[22] = 0;
        board[23] = 0;
        board[24] = 1;
        board[25] = 6;
        board[26] = 0;
        board[27] = 9;
        board[28] = 0;
        board[29] = 8;
        board[30] = 0;
        board[31] = 0;
        board[32] = 0;
        board[33] = 0;
        board[34] = 0;
        board[35] = 0;
        board[36] = 0;
        board[37] = 7;
        board[38] = 0;
        board[39] = 0;
        board[40] = 0;
        board[41] = 0;
        board[42] = 0;
        board[43] = 9;
        board[44] = 0;
        board[45] = 0;
        board[46] = 0;
        board[47] = 0;
        board[48] = 0;
        board[49] = 0;
        board[50] = 0;
        board[51] = 2;
        board[52] = 0;
        board[53] = 5;
        board[54] = 0;
        board[55] = 9;
        board[56] = 1;
        board[57] = 0;
        board[58] = 0;
        board[59] = 0;
        board[60] = 0;
        board[61] = 5;
        board[62] = 0;
        board[63] = 0;
        board[64] = 0;
        board[65] = 7;
        board[66] = 4;
        board[67] = 3;
        board[68] = 9;
        board[69] = 0;
        board[70] = 2;
        board[71] = 0;
        board[72] = 4;
        board[73] = 0;
        board[74] = 0;
        board[75] = 0;
        board[76] = 0;
        board[77] = 7;
        board[78] = 0;
        board[79] = 0;
        board[80] = 0;
    }

    if(n==10) {
        board[0] = 0;
        board[1] = 0;
        board[2] = 1;
        board[3] = 9;
        board[4] = 0;
        board[5] = 0;
        board[6] = 0;
        board[7] = 0;
        board[8] = 3;
        board[9] = 9;
        board[10] = 0;
        board[11] = 0;
        board[12] = 7;
        board[13] = 0;
        board[14] = 0;
        board[15] = 1;
        board[16] = 6;
        board[17] = 0;
        board[18] = 0;
        board[19] = 3;
        board[20] = 0;
        board[21] = 0;
        board[22] = 0;
        board[23] = 5;
        board[24] = 0;
        board[25] = 0;
        board[26] = 7;
        board[27] = 0;
        board[28] = 5;
        board[29] = 0;
        board[30] = 0;
        board[31] = 0;
        board[32] = 0;
        board[33] = 0;
        board[34] = 0;
        board[35] = 9;
        board[36] = 0;
        board[37] = 0;
        board[38] = 4;
        board[39] = 3;
        board[40] = 0;
        board[41] = 2;
        board[42] = 6;
        board[43] = 0;
        board[44] = 0;
        board[45] = 2;
        board[46] = 0;
        board[47] = 0;
        board[48] = 0;
        board[49] = 0;
        board[50] = 0;
        board[51] = 0;
        board[52] = 7;
        board[53] = 0;
        board[54] = 6;
        board[55] = 0;
        board[56] = 0;
        board[57] = 1;
        board[58] = 0;
        board[59] = 0;
        board[60] = 0;
        board[61] = 3;
        board[62] = 0;
        board[63] = 0;
        board[64] = 4;
        board[65] = 2;
        board[66] = 0;
        board[67] = 0;
        board[68] = 7;
        board[69] = 0;
        board[70] = 0;
        board[71] = 6;
        board[72] = 5;
        board[73] = 0;
        board[74] = 0;
        board[75] = 0;
        board[76] = 0;
        board[77] = 6;
        board[78] = 8;
        board[79] = 0;
        board[80] = 0;
    }

    return board;
}
