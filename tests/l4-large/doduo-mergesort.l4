//test return 0
//for int array that contains only 0, 1, 2, 
//we want to sort all the 0 to the front, 1 in the middle, 2 in the end
//Eg, for input: [0, 2, 2, 0, 1, 0], output should be [0, 0, 0, 1, 2, 2]
int[] swap(int[] nums, int i, int j) {
  int temp = nums[i];
  nums[i] = nums[j];
  nums[j] = temp;
  return nums;
}

int[] sortcolor(int[] nums, int n) {
  int start = 0;
  int end = n-1;
  for(int i = 0; i < n; i++) {
    if(nums[i] == 0) {
      nums = swap(nums, i, start);
      start++;
    } else if (nums[i] == 2) {
      nums = swap(nums, i, end);
      end--;
      i--;
    }
  }
  return nums;
}

int is_sorted (int[] A, int n) {
  for (int i = 1; i < n; i += 1) {
    if (A[i] < A[i-1]) return 0;
  }
  return 1;
}

int main() {
  int[] nums = alloc_array(int, 6);
  nums[0] = 0;
  nums[1] = 2;
  nums[2] = 2;
  nums[3] = 0;
  nums[4] = 1;
  nums[5] = 0;
  nums = sortcolor(nums, 6);
  return is_sorted(nums, 6);
}
