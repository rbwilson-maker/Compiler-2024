//test compile

typedef struct bloom_filter* bloom_t;

bloom_t bloom_new(int capacity)
   /*@requires capacity > 0; @*/
   /*@ensures \result != NULL; @*/ ;

bool bloom_contains(bloom_t B, int x)
   /*@requires B != NULL; @*/ ;

void bloom_add(bloom_t B, int x)
   /*@requires B != NULL; @*/
   /*@ensures bloom_contains(B, x); @*/ ;

/////////////////////////////////////
/* Implementation of Bloom Filters */
/////////////////////////////////////

typedef struct bloom_filter bloom;

struct bloom_filter
{
	bool[] data;
	int capacity; // capacity == \length(data)
};

/* data structure invariant */
bool is_bloom_expected_length(int capacity, bool[] data)
//@requires \length(data) == capacity;
{
	return true;
}

bool is_bloom(bloom_t B)
{
	return B != NULL
	&& B->capacity > 0
	&& is_bloom_expected_length(B->capacity, B->data);
}

/* create new bloom filter */
bloom_t bloom_new(int m)
//@requires m > 0;
//@ensures is_bloom(\result);
{
	bloom_t B = alloc(bloom);
	bool[] data = alloc_array(bool, m);
	B->data = data;
	B->capacity = m;
	return B;
}

// helper: hash function
int hash_mul31(int s)
{
	return s * 31 << 24;
}

int hash(int s, int capacity)
//@requires capacity > 0;
//@ensures 0 <= \result && \result < capacity;
{
	int h = hash_mul31(s);
	if (h < 0) h = -1 * h;
	return h % capacity;
}

/* contains */
bool bloom_contains(bloom_t B, int x)
//@requires is_bloom(B);
{
	int index = hash(x, B->capacity);
	return B->data[index];
}

void bloom_add(bloom_t B, int x)
//@requires is_bloom(B);
//@ensures bloom_contains(B, x);
{
	int index = hash(x, B->capacity);
	B->data[index] = true;
}

int main()
{
  int score = 100;

  bloom_t bb = bloom_new(1);
  bloom_add(bb, 2);
  bloom_add(bb, 3);
  assert(bloom_contains(bb, 2));
  assert(bloom_contains(bb, 3));

  bloom_t b1 = bloom_new(5);
  assert(b1 != NULL);

  return 42;
}