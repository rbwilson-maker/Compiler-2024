//test return 40
// the solveknapsack function solves 0/1 knapsack problem
// which computes the maximum value of items that can be contained in a bagsize
// with size bagsize.
int max(int a, int b) {
  if(a > b) {
    return a;
  } else {
    return b;
  }
}

int solveknapsack(int[] values, int[] size, int bagsize, int n) {
  int[][] dp = alloc_array(int[], n+1);
  for(int i = 0; i <= n; i++) {
    dp[i] = alloc_array(int, bagsize+1);
  }
  for(int i = 0; i <= n; i++) {
    for(int j = 0; j <= bagsize; j++) {
      if(i == 0) {
        dp[i][j] = 0;
      } else {
        assert(i-1 < n);
        if(size[i-1] <= j) {
            dp[i][j] = max(dp[i-1][j], values[i-1] + dp[i-1][j-size[i-1]]);
        } else {
            dp[i][j] = dp[i-1][j];
        }
      }
    }
  }
  return dp[n][bagsize];
}

int main() {
  int[] values = alloc_array(int, 5);
  int[] size = alloc_array(int, 5);
  values[0] = 1;
  values[1] = 7;
  values[2] = 3;
  values[3] = 4;
  values[4] = 33;
  size[0] =  4;
  size[1] = 1;
  size[2] = 5;
  size[3] = 6;
  size[4] = 9;
  return solveknapsack(values, size, 10, 5);
}
