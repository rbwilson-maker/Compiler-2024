//test return 995295

/**
 * @brief This program computes a two-factor authentication code.
 *
 * As per convention, the TOTP code is computed with 6 digits and with a
 * refresh rate of 30 seconds. The timestamp is unfortunately hardcoded.
 *
 * Based on pseudocode from Wikipedia for SHA1, HMAC, and HOTP algorithm
 * implementations.
 *
 * Kevin Geng, Team Barsoomian
 * 15-411 Fall 2020
 */

struct sha1_hash {
  int h0;
  int h1;
  int h2;
  int h3;
  int h4;
};

typedef struct sha1_hash* sha1_hash;

void array_copy(int[] dst, int[] src, int len) {
  for (int i = 0; i < len; i++) {
    dst[i] = src[i];
  }
}

// Writes a byte `val` into packed big-endian int array
void write_packed_byte(int[] arr, int byte_idx, int val) {
  assert((val & ~0xff) == 0);
  int idx = byte_idx / 4;
  int offset = 24 - (byte_idx % 4) * 8;
  arr[idx] = (arr[idx] & ~(0xff << offset)) | (val << offset);
}

// Read a big-endian int from a byte array
int read_big_endian_int(int[] byte_arr, int idx) {
  return (byte_arr[idx] << 24) |
         (byte_arr[idx + 1] << 16) |
         (byte_arr[idx + 2] << 8) |
         (byte_arr[idx + 3]);
}

// Writes a int as big-endian into a byte array
void write_big_endian_int(int[] byte_arr, int idx, int val) {
  for (int i = 0; i < 4; i++) {
    byte_arr[idx + i] = (val >> (24 - 8 * i)) & 0xff;
  }
}

// Left-rotates the input integer by a value in [0, 32)
int left_rotate(int val, int shift_amt) {
  int mask = (1 << shift_amt) - 1;
  int rev_shift = 32 - shift_amt;
  return (val << shift_amt) | ((val >> rev_shift) & mask);
}

// Processes a single 16-byte chunk of SHA1 input, updating the hash
void process_sha1_chunk(int[] input, int idx, int[] w, sha1_hash h) {
  // Copy input into w
  for (int i = 0; i < 16; i++) {
    w[i] = input[idx + i];
  }

  // Extend input into rest of space
  for (int i = 16; i < 80; i++) {
    w[i] = left_rotate(w[i-3] ^ w[i-8] ^ w[i-14] ^ w[i-16], 1);
  }

  // Initialize hash value for this chunk
  int a = h->h0;
  int b = h->h1;
  int c = h->h2;
  int d = h->h3;
  int e = h->h4;
  int f;
  int k;

  // Main loop
  for (int i = 0; i < 80; i++) {
    if (0 <= i && i < 20) {
      f = (b & c) | ((~b) & d);
      k = 0x5A827999;
    }
    else if (20 <= i && i < 40) {
      f = b ^ c ^ d;
      k = 0x6ED9EBA1;
    }
    else if (40 <= i && i < 60) {
      f = (b & c) | (b & d) | (c & d);
      k = 0x8F1BBCDC;
    }
    else {
      f = b ^ c ^ d;
      k = 0xCA62C1D6;
    }

    int temp = left_rotate(a, 5) + f + e + k + w[i];
    e = d;
    d = c;
    c = left_rotate(b, 30);
    b = a;
    a = temp;
  }

  // Add chunk hash to result
  h->h0 += a;
  h->h1 += b;
  h->h2 += c;
  h->h3 += d;
  h->h4 += e;
}

// Computes a SHA1 hash of the input
int[] sha1(int[] byte_arr, int byte_len) {
  // The input is assumed to be one byte per array element.
  // Compute the new length by adding 1 (for ending bit), 8 (for length),
  // then rounding up to a multiple of 64 (i.e. 512 bits).
  int new_byte_len = byte_len + 1 + 8;
  new_byte_len = ((new_byte_len + 64 - 1) / 64) * 64;

  // Pack the input into a uint32_t array
  int int_len = new_byte_len / 4;
  int[] int_arr = alloc_array(int, int_len);
  assert(int_len % 16 == 0);

  // Write input bytes into packed array
  for (int i = 0; i < byte_len; i++) {
    write_packed_byte(int_arr, i, byte_arr[i]);
  }

  // Write 0x80 after input
  write_packed_byte(int_arr, byte_len, 0x80);

  // Write length at end of array
  int_arr[int_len - 1] = byte_len * 8;

  // Allocate initial hash
  sha1_hash h = alloc(struct sha1_hash);
  h->h0 = 0x67452301;
  h->h1 = 0xEFCDAB89;
  h->h2 = 0x98BADCFE;
  h->h3 = 0x10325476;
  h->h4 = 0xC3D2E1F0;

  // Process the message in 64-byte chunks
  int[] scratch_space = alloc_array(int, 80);
  for (int i = 0; i < int_len; i += 16) {
    process_sha1_chunk(int_arr, i, scratch_space, h);
  }

  // Return 20 byte output
  int[] result = alloc_array(int, 20);
  write_big_endian_int(result, 0, h->h0);
  write_big_endian_int(result, 4, h->h1);
  write_big_endian_int(result, 8, h->h2);
  write_big_endian_int(result, 12, h->h3);
  write_big_endian_int(result, 16, h->h4);
  return result;
}

// Computes HMAC_SHA1(key, msg)
int[] hmac_sha1(int[] key, int key_len, int[] msg, int msg_len) {
  int block_size = 64;
  int output_size = 20;

  // Shorten key by hashing
  if (key_len > block_size) {
    key = sha1(key, key_len);
    key_len = output_size;
  }

  // Pad key with 0s up to block size
  if (key_len < block_size) {
    int[] new_key = alloc_array(int, block_size);
    array_copy(new_key, key, key_len);

    key = new_key;
    key_len = block_size;
  }

  assert(key_len == block_size);

  // Inner padded key
  int[] i_key_pad = alloc_array(int, block_size + msg_len);
  for (int i = 0; i < block_size; i++) {
    i_key_pad[i] = key[i] ^ 0x36;
  }
  for (int i = 0; i < msg_len; i++) {
    i_key_pad[block_size + i] = msg[i];
  }
  int[] result = sha1(i_key_pad, block_size + msg_len);

  // Outer padded key
  int[] o_key_pad = alloc_array(int, block_size + output_size);
  for (int i = 0; i < block_size; i++) {
    o_key_pad[i] = key[i] ^ 0x5c;
  }
  for (int i = 0; i < output_size; i++) {
    o_key_pad[block_size + i] = result[i];
  }

  return sha1(o_key_pad, block_size + output_size);
}

// Compute HOTP(key, counter)
int hotp(int[] key, int key_len, int counter) {
  // Create message (8 byte representation of counter)
  int msg_len = 8;
  int[] msg = alloc_array(int, msg_len);
  for (int i = 0; i < 4; i++) {
    msg[4 + i] = (counter >> (24 - i * 8)) & 0xff;
  }

  // Compute HMAC_SHA1
  int[] mac = hmac_sha1(key, key_len, msg, msg_len);

  // Use index to extract truncated value
  int idx = mac[19] % 16;
  int truncated = read_big_endian_int(mac, idx) & 0x7fffffff;
  return truncated % 1000000;
}

// Compute TOTP(key, timestamp)
// Timestamp is a UNIX timestamp; refresh period is 30 seconds
int totp(int[] key, int key_len, int timestamp) {
  return hotp(key, key_len, timestamp / 30);
}

int main() {
  // Secret key: ohu3 exxn 4zrn dwzp
  int key_len = 10;
  int[] key = alloc_array(int, key_len);
  key[0] = 0x71;
  key[1] = 0xe9;
  key[2] = 0xb2;
  key[3] = 0x5e;
  key[4] = 0xed;
  key[5] = 0xe6;
  key[6] = 0x62;
  key[7] = 0xd1;
  key[8] = 0xdb;
  key[9] = 0x2f;

  // Timestamp: 2020-11-03T06:34:50.000Z
  int timestamp = 1604385290;

  return totp(key, key_len, timestamp);
}
