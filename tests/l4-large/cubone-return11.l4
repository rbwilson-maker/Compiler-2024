//test return 0
//Performs mergesort on a given array

int[] mergesort(int[] a, int l_end, int r_end) {
  int length = r_end - l_end;

  if (length <= 0)
    return alloc_array(int, 0);

  if (length == 1) {
    int[] result = alloc_array(int, 1);
    result[0] = a[l_end];
    return result;
  }

  int[] left = mergesort(a, l_end, l_end + length / 2);
  int[] right = mergesort(a, l_end + length / 2, r_end);

  int[] result = alloc_array(int, length);
  int left_index = 0;
  int right_index = 0;

  for (int i = 0; i < length; i++) {
    if (left_index >= length / 2) {
      result[i] = right[right_index];
      right_index += 1;
    }
    else if (right_index >= length - length / 2) {
      result[i] = left[left_index];
      left_index += 1;
    }
    else {
      if (left[left_index] < right[right_index]) {
        result[i] = left[left_index];
        left_index += 1;
      }
      else {
        result[i] = right[right_index];
        right_index += 1;
      }
    }
  }

  return result;
}

int main() {
  int[] a = alloc_array(int, 10);
  a[0] = 1;
  a[1] = 3;
  a[2] = 44;
  a[3] = 56;
  a[4] = 11;
  a[5] = 2;
  a[6] = 7;
  a[7] = 4;
  a[8] = 10;
  a[9] = 9;

  int[] result = mergesort(a, 0, 10);

  for (int i = 0; i < 9; i++) {
    if (result[i] >= result[i + 1])
      return 1;
  }

  return 0;
}
