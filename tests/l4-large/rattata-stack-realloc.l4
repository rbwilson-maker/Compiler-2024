//test return 3725
//This one forces it to reallocate memory when the stack grows too large.

struct stack_struct {
   //We add on elements starting from 0. curr_idx represents the
   //maxmimum index that has an element.
   int curr_idx; 
   int[] elems;
   int size;
   };

typedef struct stack_struct* stack;

stack empty_stack() {
   int size = 2;
   stack result = alloc(struct stack_struct);
   result->curr_idx = -1;
   result->elems = alloc_array(int, size);
   result->size = size;
   return result;
   }

int pop (stack s) {
   int result = s->elems[s->curr_idx];
   s->curr_idx--;
   return result;
   }

void push (stack s, int x) {
   if (s->curr_idx == s->size - 1) {
      //stack is full, need to reallocate
      int[] new_elems = alloc_array(int, s->size * 2);
      for (int i = 0; i <= s->curr_idx; i++) {
          new_elems[i] = s->elems[i];
	  }
      s->elems = new_elems;
      s->size *= 2;
      }
   s->curr_idx++;
   s->elems[s->curr_idx] = x;
   }

int main () {
   stack s = empty_stack();
   int sum = 0;
   int num_elems = 100;
   for (int i = 0; i < num_elems; i++) {
       push(s, i);
       }
   for (int i = 0; i < num_elems/2; i++) {
       sum += pop(s);
       }
   return sum;
}

   