//test return 5
/* use bottom-up dp to compute the number of ways to make change for n dollars
 * using infinite supply of S[0], S[1], ..., S[m-1] dollar coins
 */
// modified from http://www.geeksforgeeks.org/dynamic-programming-set-7-coin-change/
int count(int[] S, int m, int n) {
    int i;
    int j;

    int [][] table = alloc_array(int[], n+1);
    for (i=0; i<n+1; i++) {
        table[i] = alloc_array(int, m);
    }
    // now table is a (n+1)*m 2d array
    for (j=0; j<m; j++) {
        table[0][j] = 1;
    }

    for (i = 1; i < n+1; i++) {
        for (j = 0; j < m; j++) {
            // Count of solutions including S[j]
            int x = (i-S[j] >= 0) ? table[i - S[j]][j] : 0;

            // Count of solutions excluding S[j]
            int y = (j >= 1) ? table[i][j-1] : 0;

            // total count
            table[i][j] = x + y;
        }
    }
    return table[n][m-1];
}

int main() {
    int n = 10;
    int m = 4;
    int[] S = alloc_array(int, m);
    S[0] = 2;
    S[1] = 5;
    S[2] = 3;
    S[3] = 6;
    return count(S, m, n);
}
