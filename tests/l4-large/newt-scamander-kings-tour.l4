//test return 2

// checks if a 2D board is a square, 1 indexed knight's tour

int find_start_row(int[][] b, int len) {
	for (int i = 0; i < len; i++) {
		for (int j = 0; j < len; j++) {
			if (b[i][j] == 1) { return i; }
		}
	}
	return -1;
}

int find_start_col(int[][] b, int len) {
	for (int i = 0; i < len; i++) {
		for (int j = 0; j < len; j++) {
			if (b[i][j] == 1) { return j; }
		}
	}
	return -1;
}

bool is_kings_tour(int[][] b, int len) {
	int row;
	int col;
	row = find_start_row(b, len);
	col = find_start_col(b, len);
	if (row == -1 || col == -1) { return false; }
	int total = len * len;
	for (int i = 1; i < total; i++) {
		int tgt = i+1;
		bool found = false;
		int check_row;
		int check_col;
		int next_row = row;
		int next_col = col;
		for (int dr = -1; dr < 2; dr++) {
			for (int dc = -1; dc < 2; dc++) {
				check_row = row + dr;
				check_col = col + dc;
				if (0 <= check_row && check_row < len &&
					0 <= check_col && check_col < len &&
					(dr != 0 || dc != 0) && b[check_row][check_col] == tgt) {
					found = true;
					next_col = check_col;
					next_row = check_row;
				}
			}
		}
		if (!found) {return false;}
		row = next_row;
		col = next_col;
	}
	return true;
}

int set_board_a(int[][] b) {
	b[0][0] = 3; b[0][1] = 2; b[0][2] = 1;
	b[1][0] = 6; b[1][1] = 4; b[1][2] = 9;
	b[2][0] = 5; b[2][1] = 7; b[2][2] = 8;
	return 3;
}

int set_board_b(int[][] b) {
	b[0][0] = 1; b[0][1] = 2; b[0][2] = 3;
	b[1][0] = 7; b[1][1] = 4; b[1][2] = 8;
	b[2][0] = 6; b[2][1] = 5; b[2][2] = 9;
	return 3;
}

int set_board_c(int[][] b) {
	b[0][0] = 3; b[0][1] = 2; b[0][2] = 1;
	b[1][0] = 6; b[1][1] = 4; b[1][2] = 0;
	b[2][0] = 5; b[2][1] = 7; b[2][2] = 8;
	return 3;
}

int set_board_d(int[][] b) {
	b[0][0] =  1; b[0][1] = 14; b[0][2] = 15; b[0][3] = 16;
	b[1][0] = 13; b[1][1] =  2; b[1][2] =  7; b[1][3] =  6;
	b[2][0] = 12; b[2][1] =  8; b[2][2] =  3; b[2][3] =  5;
	b[3][0] = 11; b[3][1] = 10; b[3][2] =  9; b[3][3] =  4;
	return 4;
}

int main() {
	int[][] board;
	board = alloc_array(int[], 4);
	for (int i = 0; i < 4; i++) {
		board[i] = alloc_array(int, 4);
	}
	int good_ct = 0;
	int size;
	size = set_board_a(board);
	if (is_kings_tour(board, size)) { good_ct++; }
	size = set_board_b(board);
	if (is_kings_tour(board, size)) { good_ct++; }
	size = set_board_c(board);
	if (is_kings_tour(board, size)) { good_ct++; }
	size = set_board_d(board);
	if (is_kings_tour(board, size)) { good_ct++; }

	return good_ct;
}