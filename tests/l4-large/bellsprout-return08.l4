//test return 12
// calculate s = 1 + 1/2 + 1/3... while s < 3

struct fraction {
  int num;
  int den;
};
typedef struct fraction fraction;

fraction* make_fraction(int num, int den) {
  assert(den != 0);
  fraction* f = alloc(fraction);
  f->num = num;
  f->den = den;
  return f;
}

fraction* add(fraction* a, fraction* b) {
  fraction* sum = alloc(fraction);
  sum->num = a->num * b->den + a->den * b->num;
  sum->den = a->den * b->den;
  return sum;
}

int gcd(int a, int b) {
  if (a < b) return gcd(b, a);
  if (a % b == 0) return b;
  return gcd(a - b, b);
}

void reduce(fraction* f) {
  int g = gcd(f->den, f->num);
  f->den /= g;
  f->num /= g;
}

int main() {
  fraction* g = make_fraction(1, 1);
  int i = 2;
  while (g->num / g->den <3) {
    g = add(g, make_fraction(1, i));
    reduce(g);
    i++;
  }
  return i;
}

