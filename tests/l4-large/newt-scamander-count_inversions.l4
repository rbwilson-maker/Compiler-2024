//test return 1

// function that counts number of inversions in an array
// A[i] and A[j] form an inversion if A[i] > A[j] but i < j

// O(n^2) solution
int countInversionsN(int[] A, int N){
	int count = 0;
	for(int i = 0; i<N; i++){
		for (int j = i; j < N; j++) {
			if(A[i] > A[j]) {
				count++;
			}
		}
	}
	return count;
}


int main(){
	int[] A = alloc_array(int, 5);
	A[0] = 2;
	A[1] = 4;
	A[2] = 1;
	A[3] = 3;
	A[4] = 5;

	int[] B = alloc_array(int, 5);
	B[0] = 1;
	B[1] = 2;
	B[2] = 3;
	B[3] = 4;
	B[4] = 5;

	int[] C = alloc_array(int, 5);
	C[0] = 5;
	C[1] = 4;
	C[2] = 3;
	C[3] = 2;
	C[4] = 1;

	assert(countInversionsN(A, 5) == 3);
	assert(countInversionsN(B, 5) == 0);
	assert(countInversionsN(C, 5) == 10);

	return 1;
}