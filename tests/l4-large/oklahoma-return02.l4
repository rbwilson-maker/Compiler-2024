//test return 1026
// s-expressions as arrays

struct sexp;

struct sexp {
  int val;
  struct sexp*[]* args;
};

typedef struct sexp* sexp;

int eval(sexp s) {
  assert(s != NULL);
  int val = s->val;
  if (s->args == NULL) {
    return val;
  } else {
    struct sexp*[] arr = *(s->args);
    if (val == 0) { /* addition */
      int a = eval(arr[0]);
      int b = eval(arr[1]);
      return (a + b);
    } else if (val == 1) { /* subtraction */
      int a = eval(arr[0]);
      int b = eval(arr[1]);
      return (a - b);
    } else if (val == 2) { /* multiplication */
      int a = eval(arr[0]);
      int b = eval(arr[1]);
      return (a * b);
    } else if (val == 3) { /* negation */
      int a = eval(arr[0]);
      return (-a);
    } else {
      assert(false);
      return 0;
    }
  }
}

int main ()
{
  sexp s1 = alloc(struct sexp); /* 10 */
  s1->val = 10;

  sexp s2 = alloc(struct sexp); /* 27 */
  s2->val = 27;

  sexp s3 = alloc(struct sexp); /* 37 = 10 + 27 */
  struct sexp*[] arr3 = alloc_array(struct sexp*, 2);
  struct sexp*[]* p3 = alloc(struct sexp*[]);
  *p3 = arr3;
  arr3[0] = s1;
  arr3[1] = s2;
  s3->val = 0;
  s3->args = p3;

  sexp s4 = alloc(struct sexp); /* 999 = 37 * 27 */
  struct sexp*[] arr4 = alloc_array(struct sexp*, 2);
  struct sexp*[]* p4 = alloc(struct sexp*[]);
  *p4 = arr4;
  arr4[0] = s3;
  arr4[1] = s2;
  s4->val = 2;
  s4->args = p4;

  sexp s5 = alloc(struct sexp); /* -27 = -27 */
  struct sexp*[] arr5 = alloc_array(struct sexp*, 1);
  struct sexp*[]* p5 = alloc(struct sexp*[]);
  *p5 = arr5;
  arr5[0] = s2;
  s5->val = 3;
  s5->args = p5;

  sexp s6 = alloc(struct sexp); /* 1026 = 999 - (-27) */
  struct sexp*[] arr6 = alloc_array(struct sexp*, 2);
  struct sexp*[]* p6 = alloc(struct sexp*[]);
  *p6 = arr6;
  arr6[0] = s4;
  arr6[1] = s5;
  s6->val = 1;
  s6->args = p6;

  return eval(s6);
}

