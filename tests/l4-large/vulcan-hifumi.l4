//test return 0
struct a0 { int n; };
struct a1 {
struct a0 a0;
};
struct a2 {
struct a0 a0;
struct a1 a1;
};
struct a3 {
struct a0 a0;
struct a1 a1;
struct a2 a2;
};
struct a4 {
struct a0 a0;
struct a1 a1;
struct a2 a2;
struct a3 a3;
};
struct a5 {
struct a0 a0;
struct a1 a1;
struct a2 a2;
struct a3 a3;
struct a4 a4;
};
struct a6 {
struct a0 a0;
struct a1 a1;
struct a2 a2;
struct a3 a3;
struct a4 a4;
struct a5 a5;
};
struct a7 {
struct a0 a0;
struct a1 a1;
struct a2 a2;
struct a3 a3;
struct a4 a4;
struct a5 a5;
struct a6 a6;
};
struct a8 {
struct a0 a0;
struct a1 a1;
struct a2 a2;
struct a3 a3;
struct a4 a4;
struct a5 a5;
struct a6 a6;
struct a7 a7;
};
struct a9 {
struct a0 a0;
struct a1 a1;
struct a2 a2;
struct a3 a3;
struct a4 a4;
struct a5 a5;
struct a6 a6;
struct a7 a7;
struct a8 a8;
};
struct a10 {
struct a0 a0;
struct a1 a1;
struct a2 a2;
struct a3 a3;
struct a4 a4;
struct a5 a5;
struct a6 a6;
struct a7 a7;
struct a8 a8;
struct a9 a9;
};
int main() {
struct a10 *homura = alloc(struct a10);
for (int i = 0; i < 50000; i++) {
homura->a9.a8.a7.a6.a5.a4.a3.a2.a1.a0.n = 0;}
return 0;
}
