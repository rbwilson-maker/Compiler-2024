//test return 0

struct list_node {
  int data;
  struct list_node *next;
};

typedef struct list_node list;

/**
 * Returns true if a cycle is detected
 */
bool tortoise_and_hare(list *l) {
  list *tortoise = l;
  list *hare = l;
  while (hare != NULL && hare->next != NULL) {
    tortoise = tortoise->next;
    hare = hare->next->next;
    if (tortoise == hare) {
      return true;
    }
  }
  return false;
}

int main() {
  // [1, 2, 3, 4]
  list *list_node1 = alloc(list);
  list *list_node2 = alloc(list);
  list *list_node3 = alloc(list);
  list *list_node4 = alloc(list);
  list_node1->data = 1;
  list_node1->next = list_node2;
  list_node2->data = 2;
  list_node2->next = list_node3;
  list_node3->data = 3;
  list_node3->next = list_node4;
  list_node4->data = 4;
  list_node4->next = NULL;

  if (tortoise_and_hare(list_node1)) {
    return -1;
  } else {
    return 0;
  }
}
