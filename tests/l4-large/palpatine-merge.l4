//test return 2
void merge(int[] A, int lower, int mid, int upper)
{ 
  int[] B = alloc_array(int, upper-lower);
  int i = lower; 
  int j = mid; 
  int k = 0;

  while (i < mid && j < upper)
  //@loop_invariant lower <= i && i <= mid;
  //@loop_invariant mid <= j && j <= upper;
  //@loop_invariant k == (i - lower) + (j - mid);
  {
    if (A[i] <= A[j]) {
      B[k] = A[i]; i++;
    } else {
      B[k] = A[j]; j++;
    }
    k++;
  }
  while (i < mid) { B[k] = A[i]; i++; k++; }
  while (j < upper) { B[k] = A[j]; j++; k++; }
  for (k = 0; k < upper-lower; k++) { A[lower+k] = B[k]; }
}


void sort(int[] A, int lower, int upper)
{
  if (upper-lower <= 1) return;
  int mid = lower + (upper-lower)/2;
  sort(A, lower, mid); 
  sort(A, mid, upper); 
  merge(A, lower, mid, upper);
  return;
}

int main(){
	int[] a = alloc_array(int, 100);
	int i;
	for(i=0;i<100;i++) a[i]=100-i;
	sort(a, 0, 100);
	return a[1];
}
