typedef int char;

struct list_ele {
    /**
     * @brief Pointer to a char array containing a string value.
     *
     * The memory for this string should be explicitly allocated and freed
     * whenever an element is inserted and removed from the queue.
     */
    char *value; /*value stores the address of a char. it's also a char
                   array cuz you can put the other chars right next to it */

    /**
     * @brief Pointer to the next element in the linked list.
     */
    struct list_ele *next; /*next stores the address of a (struct list_ele) */
} list_ele_t;              /* abbreviation for the long
                              type name (struct list_ele) is list_ele_t */


struct {
    /**
     * @brief Pointer to the first element in the queue, or NULL if the
     *        queue is empty.
     */
    list_ele_t *head; /*head is the name of the pointer*/
    /*
     * TODO: You will need to add more fields to this structure
     *       to efficiently implement q_size and q_insert_tail
     */
    list_ele_t *tail;
    size_t size;
} queue_t;