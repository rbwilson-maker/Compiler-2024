//test return 3

// uses a rudimentary hashtable implementation to compute minimum excluded 
// element.

typedef int[] hashset;

hashset init() {
    return alloc_array(int, 37);
}

void put(hashset ht, int value) {
    int ind = value % 37;
    while (ht[ind] != 0) {
        if (ht[ind] == value)
            return;
        ind += 1;
    }
    ht[ind] = value;
}

bool has(hashset ht, int value) {
    int ind = value % 37;
    while (ht[ind] != 0) {
        if (ht[ind] == value)
            return true;
        ind += 1;
    }
    return false;
}

int main() {
    int[] arr = alloc_array(int, 8);
    arr[0] = 4;
    arr[1] = 11;
    arr[2] = 1;
    arr[3] = 2;
    arr[4] = 5;
    arr[5] = 6;
    arr[6] = 10;
    arr[7] = 12;
    hashset set = init();
    for (int i = 0; i < 8; i++) {
        put(set, arr[i]);
    }
    int guess = 1;
    while (true) {
        if (!has(set, guess))
            return guess;
        guess += 1;
    }
    return -1;
}

