//test return 15411

typedef int ch;
typedef ch[] str;

str newString(int maxLen) {
  return alloc_array(ch, maxLen+1);
}

bool streq (str s1, str s2) {
  int i = 0;
  for (; s1[i] != 0; i++) {
    if (s1[i] != s2[i])
      return false;
  }
  return s2[i] == 0;
}

int strlen (str s1) {
  for (int i = 0; true; i++) {
    if (s1[i] == 0)
      return i;
  }
  assert(false);
  return 22;
}

str concat(str s1, str s2) {
  int s1len = strlen(s1);
  int s2len = strlen(s2);
  str out = newString(s1len + s2len + 1);
  int i;
  for (i = 0; i < s1len; i++)
    out[i] = s1[i];
  for (; i < s1len + s2len; i++)
    out[i] = s2[i - s1len];
  return out;
}

void testStr () {
  ch a = 1;
  ch b = 2;
  ch c = 3;
  ch d = 4;
  ch e = 5;
  ch f = 6;
  ch g = 7;
  ch h = 8;
  ch i = 9;
  ch j = 10;
  ch k = 11;
  ch l = 12;
  ch m = 13;
  ch n = 14;
  ch o = 15;
  ch p = 16;
  ch q = 17;
  ch r = 18;
  ch s = 19;
  ch t = 20;
  ch u = 21;
  ch v = 22;
  ch w = 23;
  ch x = 24;
  ch y = 25;
  ch z = 26;
  ch NuLL = 0;

  str s1 = newString(100);
  s1[0] = h;
  s1[1] = e;
  s1[2] = l;
  s1[3] = l;
  s1[4] = o;

  str s2 = newString(100);
  s2[0] = w;
  s2[1] = o;
  s2[2] = r;
  s2[3] = l;
  s2[4] = d;

  str s3 = newString(100);
  s3[0] = h;
  s3[1] = e;
  s3[2] = l;
  s3[3] = l;
  s3[4] = o;
  s3[5] = w;
  s3[6] = o;
  s3[7] = r;
  s3[8] = l;
  s3[9] = d;

  assert(strlen(s1) == 5);
  assert(strlen(s2) == 5);
  assert(strlen(s3) == strlen(s1) + strlen(s2));
  assert(streq(s3, s3));
  assert(streq(concat(s1, s2), s3));
}

int main() {
  testStr();
  return 15411;
}