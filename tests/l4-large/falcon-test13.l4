//test return 132
// Grade school multiplication on arbitrary-size numbers

// Only use one bit for each element of the array
struct big_int_container {
    int[] values;
    int length;
};

typedef struct big_int_container* big_int;

big_int shift(big_int x, int offset) {
    assert(x != NULL);
    assert(offset >= 0);
    int d = x->length;
    big_int result = alloc(struct big_int_container);
    result->values = alloc_array(int, d + offset);
    result->length = d + offset;
    for(int i = 0; i < d; i++) {
        result->values[i + offset] = x->values[i];
    }
    return result;
}

big_int extend(big_int x, int length) {
    assert(length >= x->length);
    big_int result = alloc(struct big_int_container);
    result->values = alloc_array(int, length);
    result->length = length;
    for(int i = 0; i < x->length; i++) {
        result->values[i] = x->values[i];
    }
    return result;
}


big_int add(big_int x, big_int y) {
    assert(x != NULL);
    assert(y != NULL);

    int max_len = (x->length >= y->length) ? x->length : y->length;
    big_int xx = extend(x, max_len);
    big_int yy = extend(y, max_len);

    assert(xx->length == yy->length);

    big_int result = alloc(struct big_int_container);
    result->length = max_len + 1;
    result->values = alloc_array(int, max_len + 1);

    int carry = 0;
    for(int i = 0; i < max_len; i++) {
        int val = xx->values[i] ^ yy->values[i] ^ carry;
        carry = (xx->values[i] + yy->values[i] + carry >= 2) ? 1 : 0;
        result->values[i] = val;
    }
    result->values[max_len] = carry;
    return result;
}

big_int mul(big_int x, big_int y) {
    // x and y should be the same size
    assert(x != NULL);
    assert(y != NULL);
    assert(x->length == y->length);

    int d = x->length;
    assert(d > 0);

    if(d == 1) {
        big_int result = alloc(struct big_int_container);
        result->length = 1;
        result->values = alloc_array(int, 1);
        result->values[0] = x->values[0] * y->values[0];
        return result;
    }

    // Simply start with 0
    big_int result = alloc(struct big_int_container);
    result->length = 1;
    result->values = alloc_array(int, 1);

    for(int i = 0; i < d; i++) {
        if(y->values[i] == 1) {
            result = add(result, shift(x, i));
        }
    }

    return result;
}


int main() {
    // Do 11 * 12
    big_int eleven = alloc(struct big_int_container);
    eleven->values = alloc_array(int, 4);
    eleven->length = 4;

    big_int twelve = alloc(struct big_int_container);
    twelve->values = alloc_array(int, 4);
    twelve->length = 4;

    eleven->values[0] = 1;
    eleven->values[1] = 1;
    eleven->values[2] = 0;
    eleven->values[3] = 1;

    twelve->values[0] = 0;
    twelve->values[1] = 0;
    twelve->values[2] = 1;
    twelve->values[3] = 1;

    big_int result = mul(eleven, twelve);

    int converted = 0;
    for(int i = 0; i < result->length; i++) {
        converted += result->values[i] * (1 << i);
    }
    return converted;
}
