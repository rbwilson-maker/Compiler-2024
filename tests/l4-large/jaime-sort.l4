//test return 1;

void merge(int[] a, int l, int m, int r)
{
  int i; int j; int k;
  int n1 = m - l + 1;
  int n2 = r - m;

  int[] left = alloc_array(int, n1);
  int[] right = alloc_array(int, n2);

  for (i = 0; i < n1; i++)
  {
    left[i] = a[l + i];
  }

  for (j = 0; j < n2; j++)
  {
    right[j] = a[m + 1 + j];
  }

  i = 0;
  j = 0;
  k = l;
  while (i < n1 && j < n2)
  {
    if (left[i] <= right[j])
    {
      a[k] = left[i];
      i++;
    }
    else
    {
      a[k] = right[j];
      j++;
    }

    k++;
  }

  while (i < n1)
  {
    a[k] = left[i];
    k++; i++;
  }

  while (j < n2)
  {
    a[k] = right[j];
    k++; j++;
  }
}

void mergesort(int[] a, int l, int r)
{
  if (l < r)
  {
    int m = l + (r - l) / 2;
    mergesort(a, l, m);
    mergesort(a, m+1, r);

    merge(a, l, m, r);
  }
}

int main()
{
  int n = 10;
  int[] a = alloc_array(int, n);
  
  int shift = 7;
  // [3, 4, 5, 6, 7, 8, 9, 0, 1, 2]
  for (int i = 0; i < n; i++)
  {
    a[(i + shift) % n] = i;
  }

  mergesort(a, 0, n-1);

  for (int i = 0; i < n; i++)
  {
    assert(a[i] == i);
  }

  return 1;
}
