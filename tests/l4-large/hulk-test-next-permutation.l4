//test return 312

//given a number represented as an arr, computes the next permutation of the number

void swap(int[] nums, int i, int j){
    int temp = nums[i];
    nums[i] = nums[j];
    nums[j] = temp;
}

void reverse(int[] arr, int start, int end){
    while(start < end){
        swap(arr, start, end);
        start += 1;
        end -= 1;
    }
}

void next_perm(int[] nums, int len){
    int i = len - 2;
    while(i >= 0 && nums[i+1] <= nums[i]){
        i--;
    }
    if(i >= 0){
        int j = len - 1;
        while(nums[j] <= nums[i]){
            j--;
        }
        swap(nums, i, j);
        reverse(nums, i + 1, len-1);
    }
}

int arr_to_num(int[] arr, int len){
    int num = 0;
    for(int i = 0; i < len; i++){
        num *= 10;
        num += arr[i];
    }
    return num;
}

int main(){
    int[] arr = alloc_array(int, 3);
    arr[0] = 2;
    arr[1] = 3;
    arr[2] = 1;
    next_perm(arr, 3);
    return arr_to_num(arr, 3);
}