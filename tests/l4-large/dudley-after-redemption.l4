//test return 410
																																												// recursive bubble sort is always fun 	
bool isSorted(int[] arr, int n, int i) {   if (i >= n-1) return true;																		  if (arr[i] > arr[i+1]) return false;																  return isSorted(arr, n, i+1); }																																											void bubble(int[] arr, int n, int i) {   if (i >= n-1) { return; }									
  if (arr[i] > arr[i+1]) {												    int tmp = arr[i];
    arr[i] = arr[i+1];     arr[i+1] = tmp;							  } 																  bubble(arr, n, i+1); }
													void sort(int[] arr, int n) {																								  if (isSorted(arr, n, 0)) return;						  bubble(arr, n, 0);				  sort(arr, n); } 											int main() {					  int[] arr = alloc_array(int, 411);
  arr[0]=267;  arr[1]=301;  arr[2]=30;  arr[3]=320;  arr[4]=394;  arr[5]=236;  arr[6]=381;  arr[7]=44;  arr[8]=95;  arr[9]=334;  arr[10]=377;  arr[11]=187;  arr[12]=72;  arr[13]=154;  arr[14]=174;  arr[15]=392;  arr[16]=212;  arr[17]=220;  arr[18]=387;  arr[19]=371;  arr[20]=241;  arr[21]=366;  arr[22]=339;  arr[23]=120;  arr[24]=281;  arr[25]=54;  arr[26]=117;  arr[27]=351;  arr[28]=330;  arr[29]=148;  arr[30]=19;  arr[31]=113;  arr[32]=237;  arr[33]=11;  arr[34]=368;  arr[35]=3;  arr[36]=316;  arr[37]=315;  arr[38]=107;  arr[39]=396;  arr[40]=91;  arr[41]=12;  arr[42]=93;  arr[43]=360;  arr[44]=280;  arr[45]=62;  arr[46]=56;  arr[47]=144;  arr[48]=109;  arr[49]=27;  arr[50]=155;  arr[51]=75;  arr[52]=40;  arr[53]=141;  arr[54]=298;  arr[55]=160;  arr[56]=10;  arr[57]=216;  arr[58]=393;  arr[59]=244;  arr[60]=229;  arr[61]=331;  arr[62]=84;  arr[63]=92;  arr[64]=342;  arr[65]=225;  arr[66]=311;  arr[67]=254;  arr[68]=235;  arr[69]=173;  arr[70]=300;  arr[71]=157;  arr[72]=292;  arr[73]=363;  arr[74]=328;  arr[75]=122;  arr[76]=20;  arr[77]=79;  arr[78]=32;  arr[79]=226;  arr[80]=338;  arr[81]=66;  arr[82]=323;  arr[83]=145;  arr[84]=344;  arr[85]=297;  arr[86]=188;  arr[87]=193;  arr[88]=390;  arr[89]=266;  arr[90]=391;  arr[91]=52;  arr[92]=272;  arr[93]=318;  arr[94]=163;  arr[95]=50;  arr[96]=284;  arr[97]=250;  arr[98]=291;  arr[99]=31;  arr[100]=126;  arr[101]=88;  arr[102]=171;  arr[103]=340;  arr[104]=61;  arr[105]=114;  arr[106]=232;  arr[107]=60;  arr[108]=364;  arr[109]=243;  arr[110]=98;  arr[111]=400;  arr[112]=192;  arr[113]=386;  arr[114]=135;  arr[115]=332;  arr[116]=348;  arr[117]=406;  arr[118]=319;  arr[119]=309;  arr[120]=231;  arr[121]=288;  arr[122]=46;  arr[123]=80;  arr[124]=13;  arr[125]=36;  arr[126]=217;  arr[127]=279;  arr[128]=215;  arr[129]=362;  arr[130]=57;  arr[131]=275;  arr[132]=223;  arr[133]=28;  arr[134]=63;  arr[135]=209;  arr[136]=196;  arr[137]=25;  arr[138]=373;  arr[139]=183;  arr[140]=296;  arr[141]=378;  arr[142]=283;  arr[143]=249;  arr[144]=51;  arr[145]=69;  arr[146]=329;  arr[147]=326;  arr[148]=224;  arr[149]=186;  arr[150]=74;  arr[151]=367;  arr[152]=97;  arr[153]=356;  arr[154]=108;  arr[155]=124;  arr[156]=169;  arr[157]=221;  arr[158]=410;  arr[159]=389;  arr[160]=372;  arr[161]=253;  arr[162]=290;  arr[163]=65;  arr[164]=374;  arr[165]=343;  arr[166]=82;  arr[167]=214;  arr[168]=239;  arr[169]=161;  arr[170]=45;  arr[171]=322;  arr[172]=255;  arr[173]=365;  arr[174]=37;  arr[175]=179;  arr[176]=195;  arr[177]=77;  arr[178]=310;  arr[179]=357;  arr[180]=409;  arr[181]=314;  arr[182]=200;  arr[183]=127;  arr[184]=312;  arr[185]=274;  arr[186]=303;  arr[187]=67;  arr[188]=2;  arr[189]=100;  arr[190]=375;  arr[191]=158;  arr[192]=4;  arr[193]=277;  arr[194]=125;  arr[195]=85;  arr[196]=204;  arr[197]=335;  arr[198]=140;  arr[199]=185;  arr[200]=153;  arr[201]=238;  arr[202]=407;  arr[203]=203;  arr[204]=132;  arr[205]=234;  arr[206]=112;  arr[207]=146;  arr[208]=162;  arr[209]=294;  arr[210]=143;  arr[211]=199;  arr[212]=382;  arr[213]=276;  arr[214]=73;  arr[215]=251;  arr[216]=43;  arr[217]=350;  arr[218]=313;  arr[219]=285;  arr[220]=102;  arr[221]=247;  arr[222]=347;  arr[223]=1;  arr[224]=317;  arr[225]=327;  arr[226]=119;  arr[227]=259;  arr[228]=405;  arr[229]=176;  arr[230]=355;  arr[231]=258;  arr[232]=194;  arr[233]=159;  arr[234]=211;  arr[235]=233;  arr[236]=90;  arr[237]=103;  arr[238]=207;  arr[239]=352;  arr[240]=6;  arr[241]=227;  arr[242]=306;  arr[243]=324;  arr[244]=346;  arr[245]=287;  arr[246]=89;  arr[247]=222;  arr[248]=8;  arr[249]=395;  arr[250]=139;  arr[251]=76;  arr[252]=29;  arr[253]=130;  arr[254]=58;  arr[255]=304;  arr[256]=353;  arr[257]=14;  arr[258]=129;  arr[259]=41;  arr[260]=181;  arr[261]=26;  arr[262]=325;  arr[263]=111;  arr[264]=205;  arr[265]=38;  arr[266]=201;  arr[267]=172;  arr[268]=260;  arr[269]=96;  arr[270]=165;  arr[271]=399;  arr[272]=380;  arr[273]=48;  arr[274]=149;  arr[275]=295;  arr[276]=384;  arr[277]=164;  arr[278]=354;  arr[279]=68;  arr[280]=336;  arr[281]=170;  arr[282]=22;  arr[283]=71;  arr[284]=202;  arr[285]=278;  arr[286]=286;  arr[287]=268;  arr[288]=7;  arr[289]=104;  arr[290]=53;  arr[291]=302;  arr[292]=118;  arr[293]=308;  arr[294]=261;  arr[295]=147;  arr[296]=64;  arr[297]=376;  arr[298]=262;  arr[299]=137;  arr[300]=242;  arr[301]=33;  arr[302]=270;  arr[303]=99;  arr[304]=349;  arr[305]=83;  arr[306]=404;  arr[307]=142;  arr[308]=128;  arr[309]=116;  arr[310]=208;  arr[311]=197;  arr[312]=78;  arr[313]=15;  arr[314]=151;  arr[315]=273;  arr[316]=134;  arr[317]=184;  arr[318]=257;  arr[319]=361;  arr[320]=230;  arr[321]=55;  arr[322]=42;  arr[323]=121;  arr[324]=265;  arr[325]=34;  arr[326]=397;  arr[327]=408;  arr[328]=167;  arr[329]=385;  arr[330]=182;  arr[331]=152;  arr[332]=5;  arr[333]=81;  arr[334]=210;  arr[335]=219;  arr[336]=131;  arr[337]=59;  arr[338]=299;  arr[339]=9;  arr[340]=94;  arr[341]=178;  arr[342]=115;  arr[343]=166;  arr[344]=35;  arr[345]=370;  arr[346]=17;  arr[347]=246;  arr[348]=18;  arr[349]=0;  arr[350]=21;  arr[351]=345;  arr[352]=156;  arr[353]=369;  arr[354]=218;  arr[355]=379;  arr[356]=305;  arr[357]=191;  arr[358]=101;  arr[359]=138;  arr[360]=87;  arr[361]=358;  arr[362]=180;  arr[363]=333;  arr[364]=150;  arr[365]=383;  arr[366]=269;  arr[367]=47;  arr[368]=293;  arr[369]=398;  arr[370]=177;  arr[371]=282;  arr[372]=175;  arr[373]=24;  arr[374]=168;  arr[375]=70;  arr[376]=264;  arr[377]=105;  arr[378]=206;  arr[379]=49;  arr[380]=341;  arr[381]=289;  arr[382]=198;  arr[383]=337;  arr[384]=403;  arr[385]=240;  arr[386]=401;  arr[387]=388;  arr[388]=39;  arr[389]=213;  arr[390]=321;  arr[391]=359;  arr[392]=110;  arr[393]=189;  arr[394]=263;  arr[395]=307;  arr[396]=271;  arr[397]=190;  arr[398]=23;  arr[399]=16;  arr[400]=123;  arr[401]=228;  arr[402]=106;  arr[403]=136;  arr[404]=245;  arr[405]=86;  arr[406]=133;  arr[407]=248;  arr[408]=256;  arr[409]=252;  arr[410]=402;					  sort(arr, 411);							  return arr[410];																			}					
