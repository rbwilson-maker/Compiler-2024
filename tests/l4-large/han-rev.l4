//test return 0

// --- stack library functions ---

// typedefs to keep things more semantic
typedef struct stack_s Stack;
typedef Stack node_t;

struct stack_s {
  Stack* next;
  int data;
};

// Create and delete the underlying datastructure
Stack* init(int data) {
  Stack* stack = alloc(Stack);
  stack->next = NULL;
  stack->data = data;
  return stack;
}
void deinit(Stack* stack) {
  if (stack == NULL) return;
  node_t* next = stack->next;
  // implicitly free (ask to be garbage collected)
  stack = NULL;
  deinit(next);
}

// Utility functions
bool is_empty(Stack** stack) {
  return (*stack)->next == NULL;
}
void print(Stack* stack) {
  for (; stack != NULL && stack->next != NULL; stack = stack->next) {
    print_int(stack->data);
  }
}

// Core stack operations
void push(Stack** stack, node_t* node) {
  node->next = *stack;
  *stack = node;
}
Stack* pop(Stack** stack) {
  if (is_empty(stack)) return NULL;

  node_t* result = *stack;
  *stack = (*stack)->next;

  return result;
}

void rev(Stack** stack) {
  Stack** temp = alloc(Stack*);
  *temp = init(-1);
  while (!is_empty(stack)) {
    push(temp, pop(stack));
  }
  deinit(*stack);
  *stack = *temp;
}

// --- tests ---

int main() {
  Stack** stack = alloc(Stack*);
  *stack = init(42);
  push(stack, init(18));
  push(stack, init(17));
  push(stack, init(23));

  print(*stack);
  rev(stack);
  print(*stack);

  return 0;
}
