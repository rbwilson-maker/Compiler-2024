//test error
// from 15122

bool is_tbuf(tbuf* B)
{
  if (!is_dll_pt(B)) {
    return false;
  }

  dll* node = B->start->next;
  
  bool after_point = false;

  while (node != B->end)
  {
    if (!is_gapbuf(node->data) || node->data->limit != 16) {
      return false; 
    }
    
    if (gapbuf_empty(node->data)) {
      // a node can only have an empty gapbuf if it is the only node
      return node->prev == B->start && node->next == B->end;
    }
    
    if (after_point && !gapbuf_at_left(node->data)) {
      // every gapbuf after the point must have a gap at the left
      return false;
    }

    if (!after_point) {
      if (node == B->point) {
        after_point = true;
      }
      else if (!gapbuf_at_right(node->data)) {
        // every gapbuf before the point must have a gap at the right
        return false;  
      }
    }
    node = node->next;
  }
  return true;
}

tbuf* tbuf_new()             /* Creates an empty text buffer with */
{
  tbuf* B = alloc(tbuf);
  
  dll* start = alloc(dll);
  dll* point = alloc(dll);
  dll* end = alloc(dll);
  
  start->next = point;
  point->prev = start;
  point->next = end;
  end->prev = point;

  B->start = start;
  B->point = point;
  B->end = end;

  point->data = gapbuf_new(16);
  
  return B;
}

void tbuf_split_pt(tbuf* B) /* Splits a full point into two nodes */
{
  gapbuf* G = gapbuf_new(16);
  dll* node = alloc(dll);
  node->data = G;
  dll* next = B->point->next;
  node->next = next;
  next->prev = node;
  node->prev = B->point;
  B->point->next = node;
  int gap_start = B->point->data->gap_start;
  
  for (int i = 8; i < 16; i++) {
    gapbuf_insert(G, B->point->data->buffer[i]);
  }
  
  while (!gapbuf_at_right(B->point->data)) {
    gapbuf_forward(B->point->data);
  }

  for (int i = 0; i < 8; i++) {
    gapbuf_delete(B->point->data);
  }
  
  if (gap_start < 8) {
    while (!gapbuf_at_left(G)) {
      gapbuf_backward(G);
    }
    while (B->point->data->gap_start != gap_start) {
      gapbuf_backward(B->point->data);
    }
  }
  else {
    while (G->gap_start != (gap_start - 8)) {
      gapbuf_backward(G);
    }
    dll_pt_forward(B);
  }
}

void tbuf_forward(tbuf* B) /* Move the cursor forward/right by 1 */
{
  if (gapbuf_at_right(B->point->data)) {
    if (dll_pt_at_right(B)) {
      return;
    }
    dll_pt_forward(B);
  }
  gapbuf_forward(B->point->data);
}

void tbuf_backward(tbuf* B) /* Move the cursor backward/left by 1 */
{
  if (gapbuf_at_left(B->point->data)) {
    if (dll_pt_at_left(B)) {
      return;
    }
    dll_pt_backward(B);
  }
  gapbuf_backward(B->point->data);
}

void tbuf_insert(tbuf* B, char c) /* Insert c before the cursor */
{
  if (gapbuf_full(B->point->data)) {
    tbuf_split_pt(B);
  }
  gapbuf_insert(B->point->data, c);
}

void tbuf_delete(tbuf* B) /* Delete the char before the cursor   */
{
  if (gapbuf_at_left(B->point->data)) {
    if (dll_pt_at_left(B)) {
      return;
    }
    dll_pt_backward(B);
  }

  gapbuf_delete(B->point->data);

  if (gapbuf_empty(B->point->data) 
      && !( B->point->prev == B->start
         && B->point->next == B->end)) {
    dll_pt_delete(B);
  }
}