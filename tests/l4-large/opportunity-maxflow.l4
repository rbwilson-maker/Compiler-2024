//test return 2
//runs ford fulkerson max flow algorithm on a 6-vertex graph

struct e {
    int capacity;
    int flow;
};

typedef struct e edge;

int dfs(edge*[][] graph, bool[] visited, int n, int u, int t, int b) {
    if (u==t) return b;
    visited[u] = true;

    for (int i = 0; i < n; i++) {
        if(graph[u][i] != NULL) {
            edge* e = graph[u][i];
            int res = e->capacity - e->flow;
            if (res > 0 && !visited[i]) {
                int augment = dfs(graph,visited, n, i, t, (res < b) ? res : b);
                if (augment > 0) {
                    e->flow += augment;
                    graph[i][u]->flow -= augment;
                    return augment;
                }
            }
        } 

    }
    return 0;
    
}

void add_edge(int v1, int v2, int cap, edge*[][] graph) {
	if (graph[v1][v2] == NULL) {
            graph[v1][v2] = alloc(edge);
            graph[v2][v1] = alloc(edge);
            graph[v2][v1]->capacity = 0;
            graph[v2][v1]->flow = 0;
            graph[v1][v2]->capacity = 0;
            graph[v1][v2]->flow = 0;

        }
        graph[v1][v2]->capacity += cap;
}

int main(){
    int n=6; 
    int m=8;
    int s=0;
    int t=5;

    edge*[][] graph = alloc_array(edge*[], n);
    for (int i =0; i < n; i++) {
        graph[i] = alloc_array(edge*,n);
        for(int j = 0; j < n; j++) graph[i][j] = NULL;
        
    }
    
    add_edge(0,1,2, graph);
    add_edge(1,2, 3, graph);
    add_edge(2,3,1, graph);
    add_edge(3,4,2, graph);
    add_edge(4,5,4, graph);
    add_edge(1,3,2, graph);
    add_edge(2,5,1, graph);
    add_edge(1,4,1,graph);
    bool[] visited = alloc_array(bool,n);

    int flow = 0;
    int aug;
    while(true){
        for (int i =0; i < n; i++) visited[i] = false;
        aug = dfs(graph, visited,n, s, t, 2147483647);
        flow += aug;
	if (aug<=0) return flow; 
    } 

    return flow;

}

