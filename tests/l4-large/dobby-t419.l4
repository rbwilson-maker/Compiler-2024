//test return 6
void swap(int[] A, int i, int j) {
  int tmp = A[i];
  A[i] = A[j];
  A[j] = tmp;
}

bool le_seg(int x, int[] A, int lo, int hi) {
  if (lo == hi) return true;
  return x <= A[lo] && le_seg(x, A, lo + 1, hi);
}

bool is_sorted(int[] A, int lo, int hi) {
  if (lo == hi) return true;
  return le_seg(A[lo], A, lo + 1, hi) && is_sorted(A, lo+1, hi);
}

void sort(int[] A, int n) 
{
  int[] T = alloc_array(int, n);
  int left = 0;
  int right = n;
  for (int i = 0; i < n; i++) {
    while (left > 0 && T[left - 1] > A[i]) {
      swap(T, left-1, right-1);
      left--;
      right--;
    }
    while (right < n && T[right] < A[i]) {
      swap(T, right, left);
      right++;
      left++;
    }
    T[left] = A[i];
    left++;
  }
  for (int i = 0; i < n; i++) {
    A[i] = T[i];
  }
}

int main() {
  int[] a = alloc_array(int, 15);
  for (int i = 0; i < 15; i++) {
    a[i] = i;
  }
  sort(a, 15);
  assert(is_sorted(a, 0, 15));
  for (int i = 0; i < 15; i++) {
    a[i] = 15 - i;
  }
  sort(a, 15);
  assert(is_sorted(a, 0, 15));
  return (a[5]);
}
