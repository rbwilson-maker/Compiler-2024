//test return 0
// unbounded array implementation

typedef struct unbounded_array ub_array;
struct unbounded_array {
    int size;
    int[] arr;
};

ub_array* new() {
    ub_array* A = alloc(ub_array);
    A->size = 1;
    A->arr = alloc_array(int, 1);
    A->arr[0] = 0;
    return A;
}

void set(ub_array* A, int i, int x) {
    assert(i >= 0);
    while (i >= A->size) {
        ub_array* A_new = alloc(ub_array);
        A_new->size = 2*A->size;
        A_new->arr = alloc_array(int, A_new->size);
        for (int j = 0; j < A->size; j++) {
            A_new->arr[j] = A->arr[j];
        }
        for (int j = A->size + 1; j < A_new->size; j++) {
            A_new->arr[j] = 0;
        }
        A = A_new;
    }
    A->arr[i] = x;
}

int get(ub_array* A, int i) {
    assert(i >= 0);
    if (i >= A->size) return 0;
    return A->arr[i];
}

int main() {
    ub_array* A = new();
    for (int i = 0; i < 1000; i++) {
        set(A, i, 42);
    }
    return 0;
}