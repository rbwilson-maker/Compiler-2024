//test memerror

// we now mutate the existing arr_1 memory, rather than returning a new array
int[] add_two_arrays(int[] arr_1, int arr_1_len, int[] arr_2, int arr_2_len) {
  if (arr_1_len != arr_2_len) {
    return arr_1;
  }
  for(int i = 0; i < arr_1_len; i++) {
    arr_1[i] += arr_2[i];
  }
  return arr_1;
}

// Copies chuck of one array into another new array
int[] array_copy_part(int[] A, int i, int j) {
  int[] result = alloc_array(int, j - i + 1);
  for(int idx = 0; idx < j-i+1; idx++) {
    result[idx] = A[idx + i];
  }
  return result;
}

int main() {
  int[] arr_1 = alloc_array(int, 3);
  int[] arr_2 = alloc_array(int, 3);
  arr_1[0] = 1;
  arr_1[1] = 2;
  arr_1[2] = 3;
  arr_2[0] = 4;
  arr_2[1] = 5;
  arr_2[2] = 6;
  // let's explicitly test aliasing here
  int[] arr_3 = arr_1;
  arr_3[0] = 10;
  arr_3[1] = 11;
  arr_3[2] = 12;
  int[] result = add_two_arrays(arr_1, 3, arr_2, 3);
  assert(result == arr_1);
  result = array_copy_part(result, 1, 2);
  // Check negative access
  return result[-1];
}