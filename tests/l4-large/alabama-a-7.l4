//test return 0
//cycle detection in linked lists

struct list_node {
  int data;
  struct list_node* next;
};
typedef struct list_node list;


bool is_acyclic(list* start, list* end) {
  if (start == NULL) return true;
  list* h = start->next;
  list* t = start;
  while (h != t) {
    if (h == NULL || h->next == NULL) return true;
    if (h == end || h->next == end) return true;
    h = h->next->next;
    t = t->next;
  }
  return false;
}

int main() {
  list *l1 = alloc(list);
  list *l2 = alloc(list);
  list *l3 = alloc(list);
  list *l4 = alloc(list);
  list *l5 = alloc(list);
  list *l6 = alloc(list);
  list *l7 = alloc(list);
  list *l8 = alloc(list);
  list *l9 = alloc(list);
  list *l10 = alloc(list);
  l1->next = l2;
  l2->next = l3;
  l3->next = l4;
  l4->next = l5;
  l5->next = l6;
  l6->next = l7;
  l7->next = l8;
  l8->next = l5;
  l9->next = l10;
  l10->next = l1;
  assert(is_acyclic(l1, l5));
  assert(!is_acyclic(l1,l10));
  return 0;
}
