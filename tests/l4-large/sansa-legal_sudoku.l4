//test return 0

bool legal_values(int[] A){
  int[] check = alloc_array(int, 9);
  for (int i = 0; i < 9; i++){
    if (A[i] > 9 || A[i] <= 0){
      return false;
    }
    check[A[i]-1] = A[i];
  }
  int sum = 0;
  for (int i = 0; i < 9; i++){
    sum += check[i];
  }
  return sum == 45;
}

bool legal_row(int[][] A){
  for (int i = 0; i < 9; i++){
    if (!legal_values(A[i])){
      return false;
    }
  }
  return true;
}

bool legal_col(int[][] A){
  int[] col = alloc_array(int, 9);
  for (int i = 0; i < 9; i++){
    for (int j = 0; j < 9; j++){
      col[j] = A[j][i];
    }
    if (!legal_values(col)){
      return false;
    }
  }
  return true;
}

bool legal_block(int[][] A){
  int count;
  int[] block = alloc_array(int, 9);
  for (int i = 0; i < 9; i++){
    count = 0;
    for (int row = i / 3 * 3; row < i / 3 * 3 + 3; row++){
      for (int col = (i * 3) % 9; col < (i * 3) % 9 + 3; col++){
        block[count] = A[row][col];
        count ++;
      }
    }
    if (!legal_values(block)){
      return false;
    }
  }
  return true;
}

bool legal_sudoku(int[][] A){
  return legal_row(A) && legal_col(A) && legal_block(A);
}

int main(){
  int[][] board = alloc_array(int[], 9);
  for (int row = 0; row < 9; row++){
    board[row] = alloc_array(int, 9);
  }
  board[0][0] = 6;
  board[0][1] = 8;
  board[0][2] = 2;
  board[0][3] = 9;
  board[0][4] = 4;
  board[0][5] = 7;
  board[0][6] = 5;
  board[0][7] = 1;
  board[0][8] = 3;
  board[1][0] = 3;
  board[1][1] = 1;
  board[1][2] = 4;
  board[1][3] = 6;
  board[1][4] = 2;
  board[1][5] = 5;
  board[1][6] = 7;
  board[1][7] = 9;
  board[1][8] = 8;
  board[2][0] = 9;
  board[2][1] = 7;
  board[2][2] = 5;
  board[2][3] = 8;
  board[2][4] = 3;
  board[2][5] = 1;
  board[2][6] = 4;
  board[2][7] = 6;
  board[2][8] = 2;
  board[3][0] = 2;
  board[3][1] = 5;
  board[3][2] = 7;
  board[3][3] = 3;
  board[3][4] = 8;
  board[3][5] = 6;
  board[3][6] = 9;
  board[3][7] = 4;
  board[3][8] = 1;
  board[4][0] = 1;
  board[4][1] = 4;
  board[4][2] = 6;
  board[4][3] = 7;
  board[4][4] = 9;
  board[4][5] = 2;
  board[4][6] = 3;
  board[4][7] = 8;
  board[4][8] = 5;
  board[5][0] = 8;
  board[5][1] = 9;
  board[5][2] = 3;
  board[5][3] = 1;
  board[5][4] = 5;
  board[5][5] = 4;
  board[5][6] = 6;
  board[5][7] = 2;
  board[5][8] = 7;
  board[6][0] = 7;
  board[6][1] = 6;
  board[6][2] = 9;
  board[6][3] = 2;
  board[6][4] = 1;
  board[6][5] = 3;
  board[6][6] = 8;
  board[6][7] = 5;
  board[6][8] = 4;
  board[7][0] = 4;
  board[7][1] = 2;
  board[7][2] = 8;
  board[7][3] = 5;
  board[7][4] = 7;
  board[7][5] = 9;
  board[7][6] = 1;
  board[7][7] = 3;
  board[7][8] = 6;
  board[8][0] = 5;
  board[8][1] = 3;
  board[8][2] = 1;
  board[8][3] = 4;
  board[8][4] = 6;
  board[8][5] = 8;
  board[8][6] = 2;
  board[8][7] = 7;
  board[8][8] = 9;
  assert(legal_sudoku(board));
  board[8][8] = 2;
  board[8][6] = 9;
  assert(!legal_sudoku(board));
  return 0;
}
