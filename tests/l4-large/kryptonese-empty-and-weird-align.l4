//test return 3

struct main;

// empty struct
struct main {
};

struct hahabadalign {
  bool a1;
  bool a2;
  bool a3;
  bool a4;
  bool a5;
  bool a6;
  bool a7;
};
// you can have a field name match the struct name 
struct same {
  int same;
  struct hahabadalign bools;
  struct hahabadalign bools2;
  bool b1;
  bool b2;
  struct hahabadalign[] arr;
};
typedef struct same same;

int main() { // access all fields 
  struct main* m = alloc(struct main);
  struct main*[] main_arr = alloc_array(struct main*, 10);
  same* b1 = alloc(struct same);
  b1->same = 1;
  b1->bools.a1 = false;
  b1->bools.a2 = true;
  b1->bools.a3 = false;
  b1->bools.a4 = true;
  b1->bools.a5 = false;
  b1->bools.a6 = false;
  b1->bools.a7 = true;
  b1->bools2.a1 = false;
  b1->bools2.a2 = false;
  b1->bools2.a3 = false;
  b1->bools2.a4 = false;
  b1->bools2.a5 = false;
  b1->bools2.a6 = false;
  b1->bools2.a7 = false;

  b1->b1 = false; // field name can match struct name 
  b1->b2 = false;
  b1->arr = alloc_array(struct hahabadalign, 10);
  b1->arr[0].a1 = true;
  b1->arr[0].a2 = false;
  b1->arr[0].a3 = false;
  b1->arr[0].a4 = true;
  b1->arr[0].a5 = true;
  b1->arr[0].a6 = false;
  b1->arr[0].a7 = false;
  for (int i = 1; i < 10; i++) {
    b1->arr[i].a1 = ! b1->arr[i-1].a7;
    b1->arr[i].a2 = ! b1->arr[i-1].a6;
    b1->arr[i].a3 = ! b1->arr[i-1].a5;
    b1->arr[i].a4 = ! b1->arr[i-1].a4;
    b1->arr[i].a5 = ! b1->arr[i-1].a3;
    b1->arr[i].a6 = ! b1->arr[i-1].a2;
    b1->arr[i].a7 = ! b1->arr[i-1].a1;
  }
  return 3;
}
