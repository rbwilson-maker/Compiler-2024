//test return 0
//implements floyd warshall and matrix mult algorithms for all-pairs shortests paths
//uses both on a 64 vertex graph and asserts that results are equal

void floydwarshall(int n,  int[][] paths) { 
	for (int k = 0; k < n; k++){
		for (int i = 0; i < n; i++){
			for (int j = 0; j < n; j++) {
				paths[i][j] = (paths[i][j] < (paths[i][k] + paths[k][j])) ? (paths[i][j]) : (paths[i][k] + paths[k][j]);
			}	
		}
	}	
}

//m: number of times to square matrix
int[][] matmult(int n, int m, int[][]paths) {

	for (int l =0; l<m; l++) {
		int[][] res = alloc_array(int[], n);
		for (int i = 0; i < n; i++) {
			res[i] = alloc_array(int, n);
			for (int j = 0; j< n; j++) {
				int curr_min = -1;
				for (int k =0; k < n; k++) {
					int x = paths[i][k] + paths[k][j];
					if(curr_min == -1 || x < curr_min) {
						curr_min = x;
					}
				
				}
				res[i][j] = curr_min;
			}

	  }
		paths = res;

  }

	return paths;

}

void add_edge(int[][] paths, int v1, int v2) {
	paths[v1][v2]=1;

}
int main(){
	int[][] paths = alloc_array(int[], 64);

	for(int i =0; i < 64; i++){
	  paths[i] = alloc_array(int, 64);
		for (int j =0; j < 64; j++){
			if(i!=j) paths[i][j] = 200;
		}

	  
	}

	for(int i = 0; i < 64; i++) {
		for(int j = 0; j<64; j++){
			if ((i%3==j%3|| i == 6) && i!=j) 
				add_edge(paths,i,j);
		}
	}
	
	int[][] pathsm = matmult(64,6, paths);
	floydwarshall(64, paths);

	for(int i =0; i < 64; i++) {
		for(int j =0; j<64;j++){
			assert(paths[i][j] == pathsm[i][j]);
		}
	}

	return 0;
}
