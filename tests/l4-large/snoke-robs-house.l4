//test return 2500000

int recurse(int[] a, int[] b, int c, int d);

int max(int a, int b) {
    return a > b ? a : b;
}

int rob(int[] dp, int[] nums, int n) {
    if (n == 0) return 0;
    if (n == 1) return nums[0];
    if (n == 2) return max(nums[0], nums[1]);
    for (int i = 0; i < n; i++) dp[i] = -1;
    int a = recurse(dp, nums, 1, n);
    for (int i = 0; i < n; i++) dp[i] = -1;
    int b = recurse(dp, nums, 0, n - 1);
    return max(a, b);
}

int recurse(int[] dp, int[] nums, int start, int n) {
    if (start >= n) return 0;
    if (n == 0) return 0;
    if (n == 1) return nums[0];
    if (dp[start] != -1) return dp[start];
    int s1 = nums[start] + recurse(dp, nums, start + 2, n);
    int s2 = recurse(dp, nums, start + 1, n);
    dp[start] = max(s1, s2);
    return dp[start];
}

int main() {
    int[] dp = alloc_array(int, 1000);
    int[] houses = alloc_array(int, 1000);
    int i;
    for (i = 0; i < 1000; i++) {
        houses[i] = (i * 10);
    }
    int res = rob(dp, houses, 1000);
    return res;
}
