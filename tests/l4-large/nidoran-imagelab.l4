//test return 0
typedef int pixel;

/* The pixel type and an interface to pixels. */

int int_max() {
    return 0x7FFFFFFF;
}

// Returns the red component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_red(pixel p)
//@ensures 0 <= \result && \result < 256;
{
  return 0xFF & (p >> 16);
}

// Returns the green component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_green(pixel p)
//@ensures 0 <= \result && \result < 256;
{
  return 0xFF & (p >> 8);
}

// Returns the blue component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_blue(pixel p)
//@ensures 0 <= \result && \result < 256;
{
  return 0xFF & p;
}

// Returns the alpha component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_alpha(pixel p)
//@ensures 0 <= \result && \result < 256;
{
  return 0xFF & (p >> 24);
}

// Returns an int representing an RGB pixel consisting of the given
// alpha, red, green and blue intensity values.
// PRECONDITION: all intensity values must be between 0 and 255,
// inclusive.
pixel make_pixel(int alpha, int red, int green, int blue)
//@requires 0 <= alpha && alpha < 256;
//@requires 0 <= red   && red < 256;
//@requires 0 <= green && green < 256;
//@requires 0 <= blue  && blue < 256;
{
  return (alpha << 24) | (red << 16) | (green << 8) | blue;
}


// Checks whether width and height are valid dimensions. To be valid
// dimensions, width and height must be strictly positive, and
// multiplying width*height must not cause overflow.
bool is_valid_imagesize(int width, int height)
{
  if (!(height > 0)) return false;
  if (!(width > 0)) return false;
  if (!(width <= int_max() / height)) return false;
  return true;
}

// Returns the row number of a pixel in an image of size width *
// height stored as a one-dimensional array given the index of the
// pixel in the one-dimensional array.
// PRECONDITION: width and height are valid dimensions and index is
// in-bounds for an array of length width*height.
// POSTCONDITION: returned value is between 0 (inclusive) and height
// (exclusive).
int get_row(int index, int width, int height)
//@requires is_valid_imagesize(width, height);
//@requires 0 <= index && index < width*height;
//@ensures 0 <= \result && \result < height;
{
  return index / width;
}

// Returns the column number of a pixel in an image of size width *
// height stored as a one-dimensional array given the index of the
// pixel in the one-dimensional array.
// PRECONDITION: width and height are valid dimensions and index is
// in-bounds for an array of length width*height.
// POSTCONDITION: returned value is between 0 (inclusive) and height
// (exclusive).
int get_column(int index, int width, int height)
//@requires is_valid_imagesize(width, height);
//@requires 0 <= index && index < width*height;
//@ensures 0 <= \result && \result < width;
{
  return index % width;
}

// Given a width and height that are valid for an image, returns true
// if the given row and column represent a valid pixel location in an
// image of size width * height and false otherwise.
// PRECONDITION: width and height are valid dimensions
bool is_valid_pixel(int row, int col, int width, int height)
//@requires is_valid_imagesize(width, height);
{
  if (!(0 <= row && row < height)) return false;
  if (!(0 <= col && col < width)) return false;
  return true;
}

// Returns the index of a pixel in a one-dimensional array of pixels
// representing a two-dimensional image of size width*height, given
// the row and column of the pixel in the two-dimensional image.
// PRECONDITION: width and height are valid dimensions
// PRECONDITION: (row, col) is a valid pixel for an image of that
// width and height
// POSTCONDITION: returned value is in-bounds for an array of length
// width*height.
int get_index(int row, int col, int width, int height)
//@requires is_valid_imagesize(width, height);
//@requires is_valid_pixel(row, col, width, height);
//@ensures 0 <= \result && \result < width*height;
{
  return row*width + col;
}


bool is_valid_mask(int[] mask, int maskwidth)
//@requires is_valid_imagesize(maskwidth, maskwidth);
//@requires \length(mask) == maskwidth * maskwidth;
{
  if (!(maskwidth % 2 == 1)) return false;
  if (!(mask[maskwidth * (maskwidth/2) + maskwidth/2] > 0)) return false;
  for (int i = 0; i < maskwidth*maskwidth; i++)
    //@loop_invariant 0 <= i;
    if (!(mask[i] >= 0)) return false;
  return true;
}

pixel[] blur(pixel[] pixels, int width, int height,
             int[] mask, int maskwidth)
//@requires is_valid_imagesize(width, height);
//@requires \length(pixels) == width*height;
//@requires is_valid_imagesize(maskwidth, maskwidth);
//@requires \length(mask) == maskwidth * maskwidth;
//@requires is_valid_mask(mask, maskwidth);
{
  pixel[] B = alloc_array(pixel, width*height);

  int radius = maskwidth/2;

  for (int row = 0; row < height; row++)
    //@loop_invariant 0 <= row;
    {
      for (int col = 0; col < width; col++)
        //@loop_invariant 0 <= col;
        {
          int accum = 0;
          int red = 0;
          int green = 0;
          int blue = 0;

          // Now iterate through the positions in the image that
          // correspond to mask locations
          for (int mrow = row-radius; mrow < row+radius+1; mrow++) {
            for (int mcol = col-radius; mcol < col+radius+1; mcol++) {

              int maskrow = mrow - (row-radius);
              int maskcol = mcol - (col-radius);
              //@assert 0 <= maskrow && maskrow < maskwidth;
              //@assert 0 <= maskcol && maskcol < maskwidth;

              // We only care about the positions that are actually in
              // the image!
              if (is_valid_pixel(mrow, mcol, width, height)) {

                // The way we've iterated makes it easy to compute the
                // image position/index and more annoying to recover
                // the mask index.
                int i = get_index(mrow, mcol, width, height);
                int maski = get_index(mrow-row+radius,
                                      mcol-col+radius,
                                      maskwidth,
                                      maskwidth);

                // Update weighted sums
                int weight = mask[maski];
                accum += weight;
                red += get_red(pixels[i]) * weight;
                green += get_green(pixels[i]) * weight;
                blue += get_blue(pixels[i]) * weight;
              }
            }
          }

          int i = get_index(row, col, width, height);
          B[i] = make_pixel(get_alpha(pixels[i]),
                            red/accum,
                            green/accum,
                            blue/accum);
        }
    }

  return B;
}

pixel[] reflect(pixel[] pixels, int width, int height)
//@requires is_valid_imagesize(width, height);
//@requires is_valid_imagesize(2*width, 2*height);
//@requires \length(pixels) == height * width;
//@ensures \length(\result) == (2*height) * (2*width);
{
  pixel[] res = alloc_array(pixel, height * width * 4);
  for (int r = 0; r < height; r++)
  {
    for (int c = 0; c < width; c++)
    {
      pixel p = pixels[get_index(r,c,width,height)];

      assert(0 <= width - 1 - c && width - 1 - c < width);
      assert(0 <= r && r < height);
      res[get_index(r, width - 1 - c, 2*width, 2*height)] = p;

      //@assert width <= width + c && width + c < 2*width;
      //@assert 0 <= r && r < height;
      res[get_index(r, width + c, 2*width, 2*height)] = p;

      //@assert 0 <= width - 1 - c && width - 1 -c < width;
      //@assert height <= 2*height - 1 - r && 2*height - 1 - r < 2*height;
      res[get_index(2 * height - 1 - r, width - 1 - c, 2*width, 2*height)] = p;

      //@assert width <= width + c && width + c < 2*width;
      //@assert height <= 2*height - 1 - r && 2*height - 1 - r < 2*height;
      res[get_index(2 * height - 1 - r, width + c, 2* width, 2*height)] = p;
    }
  }
  return res;
}



int main() {
  pixel[] I = alloc_array(pixel,4);
  I[0] = make_pixel(255,10,0,0);
  I[1] = make_pixel(255,0,10,0);
  I[2] = make_pixel(255,0,0,10);
  I[3] = make_pixel(255,0,0,0);
  pixel[] J = reflect(I, 2, 2);
  //@assert \length(J) == 16;
  //assert(J[0] == make_pixel(255,0,10,0));
  //assert(J[1] == make_pixel(255,0,0,0));

  return 0;
}